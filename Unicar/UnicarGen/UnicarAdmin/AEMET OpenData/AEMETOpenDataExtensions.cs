// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace UnicarAdmin
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using DefaultConnection;

    /// <summary>
    /// Extension methods for AEMETOpenData.
    /// </summary>
    public static partial class AEMETOpenDataExtensions
    {
            /// <summary>
            /// Avisos de Fenómenos Meteorológicos Adversos. Último.
            /// </summary>
            /// Últimos Avisos de Fenómenos Meteorológicos adversos elaborado para el
            /// área seleccionada.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='area'>
            /// | Código | Área |
            /// |----------|----------|
            /// | esp  | España|
            /// | 61  | Andalucía   |
            /// | 62  | Aragón   |
            /// | 63  | Asturias, Principado de  |
            /// | 64  | Ballears, Illes   |
            /// | 78  | Ceuta   |
            /// | 65  | Canarias   |
            /// | 66  | Cantabria   |
            /// | 67  | Castilla y León   |
            /// | 68  | Castilla - La Mancha   |
            /// | 69  | Cataluña   |
            /// | 77  | Comunitat Valenciana   |
            /// | 70  | Extremadura   |
            /// | 71  | Galicia   |
            /// | 72  | Madrid, Comunidad de    |
            /// | 79  | Melilla   |
            /// | 73  | Murcia, Región de   |
            /// | 74  | Navarra, Comunidad Foral de   |
            /// | 75  | País Vasco |
            /// | 76  | Rioja, La
            /// </param>
            public static object AvisosdeFenómenosMeteorológicosAdversosÚltimo(this IAEMETOpenData operations, string area)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).AvisosdeFenómenosMeteorológicosAdversosÚltimoAsync(area), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Avisos de Fenómenos Meteorológicos Adversos. Último.
            /// </summary>
            /// Últimos Avisos de Fenómenos Meteorológicos adversos elaborado para el
            /// área seleccionada.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='area'>
            /// | Código | Área |
            /// |----------|----------|
            /// | esp  | España|
            /// | 61  | Andalucía   |
            /// | 62  | Aragón   |
            /// | 63  | Asturias, Principado de  |
            /// | 64  | Ballears, Illes   |
            /// | 78  | Ceuta   |
            /// | 65  | Canarias   |
            /// | 66  | Cantabria   |
            /// | 67  | Castilla y León   |
            /// | 68  | Castilla - La Mancha   |
            /// | 69  | Cataluña   |
            /// | 77  | Comunitat Valenciana   |
            /// | 70  | Extremadura   |
            /// | 71  | Galicia   |
            /// | 72  | Madrid, Comunidad de    |
            /// | 79  | Melilla   |
            /// | 73  | Murcia, Región de   |
            /// | 74  | Navarra, Comunidad Foral de   |
            /// | 75  | País Vasco |
            /// | 76  | Rioja, La
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AvisosdeFenómenosMeteorológicosAdversosÚltimoAsync(this IAEMETOpenData operations, string area, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AvisosdeFenómenosMeteorológicosAdversosÚltimoWithHttpMessagesAsync(area, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Avisos de Fenómenos Meteorológicos Adversos. Archivo.
            /// </summary>
            /// Avisos de Fenómenos Meteorológicos adversos para el rango de fechas
            /// seleccionado (datos desde 18/06/2018).
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fechaIniStr'>
            /// Fecha Inicial (AAAA-MM-DDTHH:MM:SSUTC)
            /// </param>
            /// <param name='fechaFinStr'>
            /// Fecha Final (AAAA-MM-DDTHH:MM:SSUTC)
            /// </param>
            public static object AvisosdeFenómenosMeteorológicosAdversosArchivo(this IAEMETOpenData operations, string fechaIniStr, string fechaFinStr)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).AvisosdeFenómenosMeteorológicosAdversosArchivoAsync(fechaIniStr, fechaFinStr), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Avisos de Fenómenos Meteorológicos Adversos. Archivo.
            /// </summary>
            /// Avisos de Fenómenos Meteorológicos adversos para el rango de fechas
            /// seleccionado (datos desde 18/06/2018).
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fechaIniStr'>
            /// Fecha Inicial (AAAA-MM-DDTHH:MM:SSUTC)
            /// </param>
            /// <param name='fechaFinStr'>
            /// Fecha Final (AAAA-MM-DDTHH:MM:SSUTC)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AvisosdeFenómenosMeteorológicosAdversosArchivoAsync(this IAEMETOpenData operations, string fechaIniStr, string fechaFinStr, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AvisosdeFenómenosMeteorológicosAdversosArchivoWithHttpMessagesAsync(fechaIniStr, fechaFinStr, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Mapa de niveles de riesgo estimado meteorológico de incendios forestales.
            /// </summary>
            /// Último mapa elaborado de niveles de riesgo estimado meteorológico de
            /// incendios forestales para el área pasada por parámetro.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='area'>
            /// | Código | Área |
            /// |----------|----------|
            /// | p  | Península   |
            /// | b  | Baleares   |
            /// | c  | Canarias
            /// </param>
            public static object Mapadenivelesderiesgoestimadometeorológicodeincendiosforestales(this IAEMETOpenData operations, string area)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).MapadenivelesderiesgoestimadometeorológicodeincendiosforestalesAsync(area), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Mapa de niveles de riesgo estimado meteorológico de incendios forestales.
            /// </summary>
            /// Último mapa elaborado de niveles de riesgo estimado meteorológico de
            /// incendios forestales para el área pasada por parámetro.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='area'>
            /// | Código | Área |
            /// |----------|----------|
            /// | p  | Península   |
            /// | b  | Baleares   |
            /// | c  | Canarias
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> MapadenivelesderiesgoestimadometeorológicodeincendiosforestalesAsync(this IAEMETOpenData operations, string area, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MapadenivelesderiesgoestimadometeorológicodeincendiosforestalesWithHttpMessagesAsync(area, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Mapa de niveles de riesgo previsto meteorológico de incendios forestales.
            /// </summary>
            /// Mapa elaborado de niveles de riesgo estimado meteorológico de incendios
            /// forestales para el día y el área pasados por parámetro.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dia'>
            /// | Código | Día |
            /// |----------|----------|
            /// | 1  | Mañana   |
            /// | 2  | Pasado Mañana   |
            /// | 3  | Dentro de 3 días
            /// </param>
            /// <param name='area'>
            /// | Código | Área |
            /// |----------|----------|
            /// | p  | Península   |
            /// | b  | Baleares   |
            /// | c  | Canarias
            /// </param>
            public static object Mapadenivelesderiesgoprevistometeorológicodeincendiosforestales(this IAEMETOpenData operations, string dia, string area)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).MapadenivelesderiesgoprevistometeorológicodeincendiosforestalesAsync(dia, area), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Mapa de niveles de riesgo previsto meteorológico de incendios forestales.
            /// </summary>
            /// Mapa elaborado de niveles de riesgo estimado meteorológico de incendios
            /// forestales para el día y el área pasados por parámetro.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dia'>
            /// | Código | Día |
            /// |----------|----------|
            /// | 1  | Mañana   |
            /// | 2  | Pasado Mañana   |
            /// | 3  | Dentro de 3 días
            /// </param>
            /// <param name='area'>
            /// | Código | Área |
            /// |----------|----------|
            /// | p  | Península   |
            /// | b  | Baleares   |
            /// | c  | Canarias
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> MapadenivelesderiesgoprevistometeorológicodeincendiosforestalesAsync(this IAEMETOpenData operations, string dia, string area, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MapadenivelesderiesgoprevistometeorológicodeincendiosforestalesWithHttpMessagesAsync(dia, area, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getMunicipio
            /// </summary>
            /// Retorna información específica del municipio de España que se le pasa como
            /// parámetro.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='municipio'>
            /// Municipio
            /// </param>
            public static object GetMunicipioUsingGET(this IAEMETOpenData operations, string municipio)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).GetMunicipioUsingGETAsync(municipio), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// getMunicipio
            /// </summary>
            /// Retorna información específica del municipio de España que se le pasa como
            /// parámetro.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='municipio'>
            /// Municipio
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetMunicipioUsingGETAsync(this IAEMETOpenData operations, string municipio, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMunicipioUsingGETWithHttpMessagesAsync(municipio, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getMunicipios
            /// </summary>
            /// Retorna todos los municipios de España. Este servicio es útil para obtener
            /// información para utilizar otros elementos de AEMET OpenData, como por
            /// ejemplo, la predicción de municipios para 7 días o por  horas ya que nos
            /// retorna el id del municipio que necesitamos.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetMunicipiosUsingGET(this IAEMETOpenData operations)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).GetMunicipiosUsingGETAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// getMunicipios
            /// </summary>
            /// Retorna todos los municipios de España. Este servicio es útil para obtener
            /// información para utilizar otros elementos de AEMET OpenData, como por
            /// ejemplo, la predicción de municipios para 7 días o por  horas ya que nos
            /// retorna el id del municipio que necesitamos.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetMunicipiosUsingGETAsync(this IAEMETOpenData operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMunicipiosUsingGETWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Mapas de análisis. Última pasada.
            /// </summary>
            /// Estos mapas muestran la configuración de la presión en superficie usando
            /// isobaras (lineas de igual presión), áreas de alta (A, a) y baja (B, b)
            /// presión y los frentes en Europa y el Atlántico Norte.El mapa de análisis
            /// presenta el estado de la atmósfera a la hora correspondiente y los
            /// fenómenos más relevantes observados en España. Periodicidad de
            /// actualización: cada 12 horas (00, 12).
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object MapasdeanálisisÚltimapasada(this IAEMETOpenData operations)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).MapasdeanálisisÚltimapasadaAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Mapas de análisis. Última pasada.
            /// </summary>
            /// Estos mapas muestran la configuración de la presión en superficie usando
            /// isobaras (lineas de igual presión), áreas de alta (A, a) y baja (B, b)
            /// presión y los frentes en Europa y el Atlántico Norte.El mapa de análisis
            /// presenta el estado de la atmósfera a la hora correspondiente y los
            /// fenómenos más relevantes observados en España. Periodicidad de
            /// actualización: cada 12 horas (00, 12).
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> MapasdeanálisisÚltimapasadaAsync(this IAEMETOpenData operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MapasdeanálisisÚltimapasadaWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Mapas significativos. Tiempo actual.
            /// </summary>
            /// Mapas significativos de ámbito nacional o CCAA, para una fecha dada y ese
            /// mismo día (D+0),  al día siguiente (D+1) o a los dos días (D+2), en el
            /// periodo horario de (00_12) ó (12-24).
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fecha'>
            /// Fecha de elaboración (AAAA-MM-DD)
            /// </param>
            /// <param name='ambito'>
            /// | Código | Ámbito |
            /// |----------|----------|
            /// | esp  | España|
            /// | and  | Andalucía   |
            /// | arn  | Aragón   |
            /// | ast  | Asturias  |
            /// | bal  | Ballears, Illes   |
            /// | coo  | Canarias   |
            /// | can  | Cantabria   |
            /// | cle  | Castilla y León   |
            /// | clm  | Castilla - La Mancha   |
            /// | cat  | Cataluña   |
            /// | val  | Comunitat Valenciana   |
            /// | ext  | Extremadura   |
            /// | gal  | Galicia   |
            /// | mad  | Madrid, Comunidad de    |
            /// | mur  | Murcia, Región de   |
            /// | nav  | Navarra, Comunidad Foral de   |
            /// | pva  | País Vasco |
            /// | rio  | Rioja, La
            /// </param>
            /// <param name='dia'>
            /// | Código de día | Día |
            /// |----------|----------|
            /// | a | D+0 (00-12)  |
            /// | b  | D+0 (00-12)   |
            /// |  c | D+1 (00-12)  |
            /// | d  | D+1 (12-24) |
            /// | e  | D+2 (00-12) |
            /// | f  | D+2 (12-24)
            /// </param>
            public static object MapassignificativosTiempoactual(this IAEMETOpenData operations, string fecha, string ambito, string dia)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).MapassignificativosTiempoactualAsync(fecha, ambito, dia), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Mapas significativos. Tiempo actual.
            /// </summary>
            /// Mapas significativos de ámbito nacional o CCAA, para una fecha dada y ese
            /// mismo día (D+0),  al día siguiente (D+1) o a los dos días (D+2), en el
            /// periodo horario de (00_12) ó (12-24).
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fecha'>
            /// Fecha de elaboración (AAAA-MM-DD)
            /// </param>
            /// <param name='ambito'>
            /// | Código | Ámbito |
            /// |----------|----------|
            /// | esp  | España|
            /// | and  | Andalucía   |
            /// | arn  | Aragón   |
            /// | ast  | Asturias  |
            /// | bal  | Ballears, Illes   |
            /// | coo  | Canarias   |
            /// | can  | Cantabria   |
            /// | cle  | Castilla y León   |
            /// | clm  | Castilla - La Mancha   |
            /// | cat  | Cataluña   |
            /// | val  | Comunitat Valenciana   |
            /// | ext  | Extremadura   |
            /// | gal  | Galicia   |
            /// | mad  | Madrid, Comunidad de    |
            /// | mur  | Murcia, Región de   |
            /// | nav  | Navarra, Comunidad Foral de   |
            /// | pva  | País Vasco |
            /// | rio  | Rioja, La
            /// </param>
            /// <param name='dia'>
            /// | Código de día | Día |
            /// |----------|----------|
            /// | a | D+0 (00-12)  |
            /// | b  | D+0 (00-12)   |
            /// |  c | D+1 (00-12)  |
            /// | d  | D+1 (12-24) |
            /// | e  | D+2 (00-12) |
            /// | f  | D+2 (12-24)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> MapassignificativosTiempoactualAsync(this IAEMETOpenData operations, string fecha, string ambito, string dia, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MapassignificativosTiempoactualWithHttpMessagesAsync(fecha, ambito, dia, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Datos de observación. Tiempo actual.
            /// </summary>
            /// Datos de observación horarios de las últimas 24 horas todas las estaciones
            /// meteorológicas de las que se han recibido datos en ese período.
            /// Frecuencia de actualización: continuamente.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object DatosdeobservaciónTiempoactual(this IAEMETOpenData operations)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).DatosdeobservaciónTiempoactualAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Datos de observación. Tiempo actual.
            /// </summary>
            /// Datos de observación horarios de las últimas 24 horas todas las estaciones
            /// meteorológicas de las que se han recibido datos en ese período.
            /// Frecuencia de actualización: continuamente.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DatosdeobservaciónTiempoactualAsync(this IAEMETOpenData operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DatosdeobservaciónTiempoactualWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Mensajes de observación. Último elaborado.
            /// </summary>
            /// Últimos mensajes de observación. Para los SYNOP y TEMP devuelve los
            /// mensajes de las últimas 24 horas y para los CLIMAT de los 40 últimos
            /// dias. Se pasa como parámetro el tipo de mensaje que se desea
            /// (tipomensaje). El resultado de la petición es un fichero en formato
            /// tar.gz, que contiene los boletines en formato json y bufr.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tipomensaje'>
            /// | Código | Tipo de Mensaje |
            /// |----------|----------|
            /// | climat  | climat   |
            /// | synop  | synop   |
            /// | temp  | temp
            /// </param>
            public static object MensajesdeobservaciónÚltimoelaborado(this IAEMETOpenData operations, string tipomensaje)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).MensajesdeobservaciónÚltimoelaboradoAsync(tipomensaje), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Mensajes de observación. Último elaborado.
            /// </summary>
            /// Últimos mensajes de observación. Para los SYNOP y TEMP devuelve los
            /// mensajes de las últimas 24 horas y para los CLIMAT de los 40 últimos
            /// dias. Se pasa como parámetro el tipo de mensaje que se desea
            /// (tipomensaje). El resultado de la petición es un fichero en formato
            /// tar.gz, que contiene los boletines en formato json y bufr.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tipomensaje'>
            /// | Código | Tipo de Mensaje |
            /// |----------|----------|
            /// | climat  | climat   |
            /// | synop  | synop   |
            /// | temp  | temp
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> MensajesdeobservaciónÚltimoelaboradoAsync(this IAEMETOpenData operations, string tipomensaje, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MensajesdeobservaciónÚltimoelaboradoWithHttpMessagesAsync(tipomensaje, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predicción CCAA hoy. Tiempo actual.
            /// </summary>
            /// Predicción para la CCAA que se pasa como parámetro con validez para mismo
            /// día que la fecha de petición. En el caso de que en la fecha de petición
            /// este producto todavía no se hubiera elaborado, se retornará el último
            /// elaborado. Actualización continuamente.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ccaa'>
            /// | Código de CCAA | CCAA |
            /// |----------|----------|
            /// | and  | Andalucía   |
            /// | arn  | Aragón   |
            /// | ast  | Asturias  |
            /// | bal  | Ballears, Illes   |
            /// | coo  | Canarias   |
            /// | can  | Cantabria   |
            /// | cle  | Castilla y León   |
            /// | clm  | Castilla - La Mancha   |
            /// | cat  | Cataluña   |
            /// | val  | Comunitat Valenciana   |
            /// | ext  | Extremadura   |
            /// | gal  | Galicia   |
            /// | mad  | Madrid, Comunidad de    |
            /// | mur  | Murcia, Región de   |
            /// | nav  | Navarra, Comunidad Foral de   |
            /// | pva  | País Vasco |
            /// | rio  | Rioja, La
            /// </param>
            public static object PredicciónCCAAhoyTiempoactual(this IAEMETOpenData operations, string ccaa)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PredicciónCCAAhoyTiempoactualAsync(ccaa), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predicción CCAA hoy. Tiempo actual.
            /// </summary>
            /// Predicción para la CCAA que se pasa como parámetro con validez para mismo
            /// día que la fecha de petición. En el caso de que en la fecha de petición
            /// este producto todavía no se hubiera elaborado, se retornará el último
            /// elaborado. Actualización continuamente.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ccaa'>
            /// | Código de CCAA | CCAA |
            /// |----------|----------|
            /// | and  | Andalucía   |
            /// | arn  | Aragón   |
            /// | ast  | Asturias  |
            /// | bal  | Ballears, Illes   |
            /// | coo  | Canarias   |
            /// | can  | Cantabria   |
            /// | cle  | Castilla y León   |
            /// | clm  | Castilla - La Mancha   |
            /// | cat  | Cataluña   |
            /// | val  | Comunitat Valenciana   |
            /// | ext  | Extremadura   |
            /// | gal  | Galicia   |
            /// | mad  | Madrid, Comunidad de    |
            /// | mur  | Murcia, Región de   |
            /// | nav  | Navarra, Comunidad Foral de   |
            /// | pva  | País Vasco |
            /// | rio  | Rioja, La
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PredicciónCCAAhoyTiempoactualAsync(this IAEMETOpenData operations, string ccaa, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredicciónCCAAhoyTiempoactualWithHttpMessagesAsync(ccaa, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predicción CCAA hoy. Archivo.
            /// </summary>
            /// Predicción para la comunidad autónoma que se pasa como parámetro (ccaa)
            /// con validez para el día de fecha de elaboración que se pasa como
            /// parámetro (fecha). Periodicidad de actualización: continuamente.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ccaa'>
            /// | Código de CCAA | CCAA |
            /// |----------|----------|
            /// | and  | Andalucía   |
            /// | arn  | Aragón   |
            /// | ast  | Astrrias  |
            /// | bal  | Ballears, Illes   |
            /// | coo  | Canarias   |
            /// | can  | Cantabria   |
            /// | cle  | Castilla y León   |
            /// | clm  | Castilla - La Mancha   |
            /// | cat  | Cataluña   |
            /// | val  | Comunitat Valenciana   |
            /// | ext  | Extremadura   |
            /// | gal  | Galicia   |
            /// | mad  | Madrid, Comunidad de    |
            /// | mur  | Murcia, Región de   |
            /// | nav  | Navarra, Comunidad Foral de   |
            /// | pva  | País Vasco |
            /// | rio  | Rioja, La
            /// </param>
            /// <param name='fecha'>
            /// Día de elaboración (AAAA-MM-DD)
            /// </param>
            public static object PredicciónCCAAhoyArchivo(this IAEMETOpenData operations, string ccaa, string fecha)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PredicciónCCAAhoyArchivoAsync(ccaa, fecha), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predicción CCAA hoy. Archivo.
            /// </summary>
            /// Predicción para la comunidad autónoma que se pasa como parámetro (ccaa)
            /// con validez para el día de fecha de elaboración que se pasa como
            /// parámetro (fecha). Periodicidad de actualización: continuamente.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ccaa'>
            /// | Código de CCAA | CCAA |
            /// |----------|----------|
            /// | and  | Andalucía   |
            /// | arn  | Aragón   |
            /// | ast  | Astrrias  |
            /// | bal  | Ballears, Illes   |
            /// | coo  | Canarias   |
            /// | can  | Cantabria   |
            /// | cle  | Castilla y León   |
            /// | clm  | Castilla - La Mancha   |
            /// | cat  | Cataluña   |
            /// | val  | Comunitat Valenciana   |
            /// | ext  | Extremadura   |
            /// | gal  | Galicia   |
            /// | mad  | Madrid, Comunidad de    |
            /// | mur  | Murcia, Región de   |
            /// | nav  | Navarra, Comunidad Foral de   |
            /// | pva  | País Vasco |
            /// | rio  | Rioja, La
            /// </param>
            /// <param name='fecha'>
            /// Día de elaboración (AAAA-MM-DD)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PredicciónCCAAhoyArchivoAsync(this IAEMETOpenData operations, string ccaa, string fecha, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredicciónCCAAhoyArchivoWithHttpMessagesAsync(ccaa, fecha, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predicción CCAA mañana. Tiempo actual.
            /// </summary>
            /// Predicción para la comunidad autónoma que se pasa como parámetro para el
            /// día siguiente a la fecha de la petición. En el caso de el producto no se
            /// hubiera elaborado todavía en la fecha de petición se retornará el último
            /// producto elaborado. Periodicidad de actualización: continuamente.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ccaa'>
            /// | Código de CCAA | CCAA |
            /// |----------|----------|
            /// | and  | Andalucía   |
            /// | arn  | Aragón   |
            /// | ast  | Astrrias  |
            /// | bal  | Ballears, Illes   |
            /// | coo  | Canarias   |
            /// | can  | Cantabria   |
            /// | cle  | Castilla y León   |
            /// | clm  | Castilla - La Mancha   |
            /// | cat  | Cataluña   |
            /// | val  | Comunitat Valenciana   |
            /// | ext  | Extremadura   |
            /// | gal  | Galicia   |
            /// | mad  | Madrid, Comunidad de    |
            /// | mur  | Murcia, Región de   |
            /// | nav  | Navarra, Comunidad Foral de   |
            /// | pva  | País Vasco |
            /// | rio  | Rioja, La
            /// </param>
            public static object PredicciónCCAAmañanaTiempoactual(this IAEMETOpenData operations, string ccaa)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PredicciónCCAAmañanaTiempoactualAsync(ccaa), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predicción CCAA mañana. Tiempo actual.
            /// </summary>
            /// Predicción para la comunidad autónoma que se pasa como parámetro para el
            /// día siguiente a la fecha de la petición. En el caso de el producto no se
            /// hubiera elaborado todavía en la fecha de petición se retornará el último
            /// producto elaborado. Periodicidad de actualización: continuamente.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ccaa'>
            /// | Código de CCAA | CCAA |
            /// |----------|----------|
            /// | and  | Andalucía   |
            /// | arn  | Aragón   |
            /// | ast  | Astrrias  |
            /// | bal  | Ballears, Illes   |
            /// | coo  | Canarias   |
            /// | can  | Cantabria   |
            /// | cle  | Castilla y León   |
            /// | clm  | Castilla - La Mancha   |
            /// | cat  | Cataluña   |
            /// | val  | Comunitat Valenciana   |
            /// | ext  | Extremadura   |
            /// | gal  | Galicia   |
            /// | mad  | Madrid, Comunidad de    |
            /// | mur  | Murcia, Región de   |
            /// | nav  | Navarra, Comunidad Foral de   |
            /// | pva  | País Vasco |
            /// | rio  | Rioja, La
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PredicciónCCAAmañanaTiempoactualAsync(this IAEMETOpenData operations, string ccaa, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredicciónCCAAmañanaTiempoactualWithHttpMessagesAsync(ccaa, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predicción CCAA mañana. Archivo.
            /// </summary>
            /// Predicción para la comunidad autónoma que se pasa como parámetro (ccaa)
            /// con validez para el día siguiente a la fecha de elaboración que se pasa
            /// como parámetro (fecha). Periodicidad de actualización. continuamente.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ccaa'>
            /// | Código de CCAA | CCAA |
            /// |----------|----------|
            /// | and  | Andalucía   |
            /// | arn  | Aragón   |
            /// | ast  | Astrrias  |
            /// | bal  | Ballears, Illes   |
            /// | coo  | Canarias   |
            /// | can  | Cantabria   |
            /// | cle  | Castilla y León   |
            /// | clm  | Castilla - La Mancha   |
            /// | cat  | Cataluña   |
            /// | val  | Comunitat Valenciana   |
            /// | ext  | Extremadura   |
            /// | gal  | Galicia   |
            /// | mad  | Madrid, Comunidad de    |
            /// | mur  | Murcia, Región de   |
            /// | nav  | Navarra, Comunidad Foral de   |
            /// | pva  | País Vasco |
            /// | rio  | Rioja, La
            /// </param>
            /// <param name='fecha'>
            /// Día de elaboración (AAAA-MM-DD)
            /// </param>
            public static object PredicciónCCAAmañanaArchivo(this IAEMETOpenData operations, string ccaa, string fecha)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PredicciónCCAAmañanaArchivoAsync(ccaa, fecha), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predicción CCAA mañana. Archivo.
            /// </summary>
            /// Predicción para la comunidad autónoma que se pasa como parámetro (ccaa)
            /// con validez para el día siguiente a la fecha de elaboración que se pasa
            /// como parámetro (fecha). Periodicidad de actualización. continuamente.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ccaa'>
            /// | Código de CCAA | CCAA |
            /// |----------|----------|
            /// | and  | Andalucía   |
            /// | arn  | Aragón   |
            /// | ast  | Astrrias  |
            /// | bal  | Ballears, Illes   |
            /// | coo  | Canarias   |
            /// | can  | Cantabria   |
            /// | cle  | Castilla y León   |
            /// | clm  | Castilla - La Mancha   |
            /// | cat  | Cataluña   |
            /// | val  | Comunitat Valenciana   |
            /// | ext  | Extremadura   |
            /// | gal  | Galicia   |
            /// | mad  | Madrid, Comunidad de    |
            /// | mur  | Murcia, Región de   |
            /// | nav  | Navarra, Comunidad Foral de   |
            /// | pva  | País Vasco |
            /// | rio  | Rioja, La
            /// </param>
            /// <param name='fecha'>
            /// Día de elaboración (AAAA-MM-DD)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PredicciónCCAAmañanaArchivoAsync(this IAEMETOpenData operations, string ccaa, string fecha, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredicciónCCAAmañanaArchivoWithHttpMessagesAsync(ccaa, fecha, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predicción CCAA medio plazo. Tiempo actual.
            /// </summary>
            /// Predicción para la comunidad autónoma que se pasa como parámetro (ccaa) y
            /// con validez para el medio plazo a partir de la fecha de petición. En el
            /// caso de que en el fecha de la petición no se hubiera generado aún el
            /// producto, se retornará el última elaborado. Periodicidad de
            /// actualización: continuamente.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ccaa'>
            /// | Código de CCAA | CCAA |
            /// |----------|----------|
            /// | and  | Andalucía   |
            /// | arn  | Aragón   |
            /// | ast  | Astrrias  |
            /// | bal  | Ballears, Illes   |
            /// | coo  | Canarias   |
            /// | can  | Cantabria   |
            /// | cle  | Castilla y León   |
            /// | clm  | Castilla - La Mancha   |
            /// | cat  | Cataluña   |
            /// | val  | Comunitat Valenciana   |
            /// | ext  | Extremadura   |
            /// | gal  | Galicia   |
            /// | mad  | Madrid, Comunidad de    |
            /// | mur  | Murcia, Región de   |
            /// | nav  | Navarra, Comunidad Foral de   |
            /// | pva  | País Vasco |
            /// | rio  | Rioja, La
            /// </param>
            public static object PredicciónCCAAmedioplazoTiempoactual(this IAEMETOpenData operations, string ccaa)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PredicciónCCAAmedioplazoTiempoactualAsync(ccaa), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predicción CCAA medio plazo. Tiempo actual.
            /// </summary>
            /// Predicción para la comunidad autónoma que se pasa como parámetro (ccaa) y
            /// con validez para el medio plazo a partir de la fecha de petición. En el
            /// caso de que en el fecha de la petición no se hubiera generado aún el
            /// producto, se retornará el última elaborado. Periodicidad de
            /// actualización: continuamente.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ccaa'>
            /// | Código de CCAA | CCAA |
            /// |----------|----------|
            /// | and  | Andalucía   |
            /// | arn  | Aragón   |
            /// | ast  | Astrrias  |
            /// | bal  | Ballears, Illes   |
            /// | coo  | Canarias   |
            /// | can  | Cantabria   |
            /// | cle  | Castilla y León   |
            /// | clm  | Castilla - La Mancha   |
            /// | cat  | Cataluña   |
            /// | val  | Comunitat Valenciana   |
            /// | ext  | Extremadura   |
            /// | gal  | Galicia   |
            /// | mad  | Madrid, Comunidad de    |
            /// | mur  | Murcia, Región de   |
            /// | nav  | Navarra, Comunidad Foral de   |
            /// | pva  | País Vasco |
            /// | rio  | Rioja, La
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PredicciónCCAAmedioplazoTiempoactualAsync(this IAEMETOpenData operations, string ccaa, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredicciónCCAAmedioplazoTiempoactualWithHttpMessagesAsync(ccaa, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predicción CCAA medio plazo. Archivo.
            /// </summary>
            /// Predicción de mediio plazo para la comunidad autónoma que se pasa como
            /// parámetro (ccaa) a partir de la fecha de elaboración que se pasa como
            /// parámetro (fecha). Periodicidad de actualización: continuamente.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ccaa'>
            /// | Código de CCAA | CCAA |
            /// |----------|----------|
            /// | and  | Andalucía   |
            /// | arn  | Aragón   |
            /// | ast  | Astrrias  |
            /// | bal  | Ballears, Illes   |
            /// | coo  | Canarias   |
            /// | can  | Cantabria   |
            /// | cle  | Castilla y León   |
            /// | clm  | Castilla - La Mancha   |
            /// | cat  | Cataluña   |
            /// | val  | Comunitat Valenciana   |
            /// | ext  | Extremadura   |
            /// | gal  | Galicia   |
            /// | mad  | Madrid, Comunidad de    |
            /// | mur  | Murcia, Región de   |
            /// | nav  | Navarra, Comunidad Foral de   |
            /// | pva  | País Vasco |
            /// | rio  | Rioja, La
            /// </param>
            /// <param name='fecha'>
            /// Día de elaboración (AAAA-MM-DD)
            /// </param>
            public static object PredicciónCCAAmedioplazoArchivo(this IAEMETOpenData operations, string ccaa, string fecha)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PredicciónCCAAmedioplazoArchivoAsync(ccaa, fecha), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predicción CCAA medio plazo. Archivo.
            /// </summary>
            /// Predicción de mediio plazo para la comunidad autónoma que se pasa como
            /// parámetro (ccaa) a partir de la fecha de elaboración que se pasa como
            /// parámetro (fecha). Periodicidad de actualización: continuamente.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ccaa'>
            /// | Código de CCAA | CCAA |
            /// |----------|----------|
            /// | and  | Andalucía   |
            /// | arn  | Aragón   |
            /// | ast  | Astrrias  |
            /// | bal  | Ballears, Illes   |
            /// | coo  | Canarias   |
            /// | can  | Cantabria   |
            /// | cle  | Castilla y León   |
            /// | clm  | Castilla - La Mancha   |
            /// | cat  | Cataluña   |
            /// | val  | Comunitat Valenciana   |
            /// | ext  | Extremadura   |
            /// | gal  | Galicia   |
            /// | mad  | Madrid, Comunidad de    |
            /// | mur  | Murcia, Región de   |
            /// | nav  | Navarra, Comunidad Foral de   |
            /// | pva  | País Vasco |
            /// | rio  | Rioja, La
            /// </param>
            /// <param name='fecha'>
            /// Día de elaboración (AAAA-MM-DD)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PredicciónCCAAmedioplazoArchivoAsync(this IAEMETOpenData operations, string ccaa, string fecha, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredicciónCCAAmedioplazoArchivoWithHttpMessagesAsync(ccaa, fecha, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predicción CCAA pasado mañana. Tiempo actual.
            /// </summary>
            /// Predicción para la comunidad autónoma que se pasa como parámetro (ccaa) y
            /// validez para el medio plazo a partir de la fecha de la petición. En el
            /// caso de que en la fecha de la petición dicho producto aún no se hubiera
            /// generado retornará el último de este tipo que se hubiera generado.
            /// Periodicidad de actualización: continuamente.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ccaa'>
            /// | Código de CCAA | CCAA |
            /// |----------|----------|
            /// | and  | Andalucía   |
            /// | arn  | Aragón   |
            /// | ast  | Astrrias  |
            /// | bal  | Ballears, Illes   |
            /// | coo  | Canarias   |
            /// | can  | Cantabria   |
            /// | cle  | Castilla y León   |
            /// | clm  | Castilla - La Mancha   |
            /// | cat  | Cataluña   |
            /// | val  | Comunitat Valenciana   |
            /// | ext  | Extremadura   |
            /// | gal  | Galicia   |
            /// | mad  | Madrid, Comunidad de    |
            /// | mur  | Murcia, Región de   |
            /// | nav  | Navarra, Comunidad Foral de   |
            /// | pva  | País Vasco |
            /// | rio  | Rioja, La
            /// </param>
            public static object PredicciónCCAApasadomañanaTiempoactual(this IAEMETOpenData operations, string ccaa)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PredicciónCCAApasadomañanaTiempoactualAsync(ccaa), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predicción CCAA pasado mañana. Tiempo actual.
            /// </summary>
            /// Predicción para la comunidad autónoma que se pasa como parámetro (ccaa) y
            /// validez para el medio plazo a partir de la fecha de la petición. En el
            /// caso de que en la fecha de la petición dicho producto aún no se hubiera
            /// generado retornará el último de este tipo que se hubiera generado.
            /// Periodicidad de actualización: continuamente.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ccaa'>
            /// | Código de CCAA | CCAA |
            /// |----------|----------|
            /// | and  | Andalucía   |
            /// | arn  | Aragón   |
            /// | ast  | Astrrias  |
            /// | bal  | Ballears, Illes   |
            /// | coo  | Canarias   |
            /// | can  | Cantabria   |
            /// | cle  | Castilla y León   |
            /// | clm  | Castilla - La Mancha   |
            /// | cat  | Cataluña   |
            /// | val  | Comunitat Valenciana   |
            /// | ext  | Extremadura   |
            /// | gal  | Galicia   |
            /// | mad  | Madrid, Comunidad de    |
            /// | mur  | Murcia, Región de   |
            /// | nav  | Navarra, Comunidad Foral de   |
            /// | pva  | País Vasco |
            /// | rio  | Rioja, La
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PredicciónCCAApasadomañanaTiempoactualAsync(this IAEMETOpenData operations, string ccaa, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredicciónCCAApasadomañanaTiempoactualWithHttpMessagesAsync(ccaa, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predicción CCAA pasado mañana. Archivo.
            /// </summary>
            /// Predicción para la comunidad autónoma que se pasa como parámetro (ccaa) y
            /// validez para pasado mañana a partir de la fecha de elaboración que se
            /// pasa como parámetro (fecha). Periodicidad de actualización: continuamente.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ccaa'>
            /// | Código de CCAA | CCAA |
            /// |----------|----------|
            /// | and  | Andalucía   |
            /// | arn  | Aragón   |
            /// | ast  | Astrrias  |
            /// | bal  | Ballears, Illes   |
            /// | coo  | Canarias   |
            /// | can  | Cantabria   |
            /// | cle  | Castilla y León   |
            /// | clm  | Castilla - La Mancha   |
            /// | cat  | Cataluña   |
            /// | val  | Comunitat Valenciana   |
            /// | ext  | Extremadura   |
            /// | gal  | Galicia   |
            /// | mad  | Madrid, Comunidad de    |
            /// | mur  | Murcia, Región de   |
            /// | nav  | Navarra, Comunidad Foral de   |
            /// | pva  | País Vasco |
            /// | rio  | Rioja, La
            /// </param>
            /// <param name='fecha'>
            /// Día de elaboración (AAAA-MM-DD)
            /// </param>
            public static object PredicciónCCAApasadomañanaArchivo(this IAEMETOpenData operations, string ccaa, string fecha)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PredicciónCCAApasadomañanaArchivoAsync(ccaa, fecha), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predicción CCAA pasado mañana. Archivo.
            /// </summary>
            /// Predicción para la comunidad autónoma que se pasa como parámetro (ccaa) y
            /// validez para pasado mañana a partir de la fecha de elaboración que se
            /// pasa como parámetro (fecha). Periodicidad de actualización: continuamente.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ccaa'>
            /// | Código de CCAA | CCAA |
            /// |----------|----------|
            /// | and  | Andalucía   |
            /// | arn  | Aragón   |
            /// | ast  | Astrrias  |
            /// | bal  | Ballears, Illes   |
            /// | coo  | Canarias   |
            /// | can  | Cantabria   |
            /// | cle  | Castilla y León   |
            /// | clm  | Castilla - La Mancha   |
            /// | cat  | Cataluña   |
            /// | val  | Comunitat Valenciana   |
            /// | ext  | Extremadura   |
            /// | gal  | Galicia   |
            /// | mad  | Madrid, Comunidad de    |
            /// | mur  | Murcia, Región de   |
            /// | nav  | Navarra, Comunidad Foral de   |
            /// | pva  | País Vasco |
            /// | rio  | Rioja, La
            /// </param>
            /// <param name='fecha'>
            /// Día de elaboración (AAAA-MM-DD)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PredicciónCCAApasadomañanaArchivoAsync(this IAEMETOpenData operations, string ccaa, string fecha, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredicciónCCAApasadomañanaArchivoWithHttpMessagesAsync(ccaa, fecha, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predicción de montaña. Tiempo pasado.
            /// </summary>
            /// Breve resumen con lo más significativo de las condiciones meteorológicas
            /// registradas en la zona de montaña que se pasa como parámetro (area) en
            /// las últimas 24-36 horas.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='area'>
            /// | Código de Área Montañosa | Área Montañosa |
            /// |----------|----------|
            /// | peu1 | Picos de Europa   |
            /// | nav1  | Pirineo Navarro   |
            /// | arn1  | Pirineo Aragonés  |
            /// | cat1  | Pirineo Catalán   |
            /// | rio1  | Ibérica Riojana   |
            /// | arn2  | Ibérica Aragonesa   |
            /// | mad2  | Sierras de Guadarrama y Somosierra  |
            /// | gre1  | Sierra de Gredos   |
            /// | nev1  | Sierra Nevada
            /// </param>
            public static object PrediccióndemontañaTiempopasado(this IAEMETOpenData operations, string area)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PrediccióndemontañaTiempopasadoAsync(area), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predicción de montaña. Tiempo pasado.
            /// </summary>
            /// Breve resumen con lo más significativo de las condiciones meteorológicas
            /// registradas en la zona de montaña que se pasa como parámetro (area) en
            /// las últimas 24-36 horas.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='area'>
            /// | Código de Área Montañosa | Área Montañosa |
            /// |----------|----------|
            /// | peu1 | Picos de Europa   |
            /// | nav1  | Pirineo Navarro   |
            /// | arn1  | Pirineo Aragonés  |
            /// | cat1  | Pirineo Catalán   |
            /// | rio1  | Ibérica Riojana   |
            /// | arn2  | Ibérica Aragonesa   |
            /// | mad2  | Sierras de Guadarrama y Somosierra  |
            /// | gre1  | Sierra de Gredos   |
            /// | nev1  | Sierra Nevada
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PrediccióndemontañaTiempopasadoAsync(this IAEMETOpenData operations, string area, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PrediccióndemontañaTiempopasadoWithHttpMessagesAsync(area, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predicción de montaña. Tiempo actual.
            /// </summary>
            /// Predicción meteorológica para la zona montañosa que se pasa como parámetro
            /// (area) con validez para el día (día).  Periodicidad de actualización:
            /// continuamente.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='area'>
            /// | Código de Área Montañosa | Área Montañosa |
            /// |----------|----------|
            /// | peu1 | Picos de Europa   |
            /// | nav1  | Pirineo Navarro   |
            /// | arn1  | Pirineo Aragonés  |
            /// | cat1  | Pirineo Catalán   |
            /// | rio1  | Ibérica Riojana   |
            /// | arn2  | Ibérica Aragonesa   |
            /// | mad2  | Sierras de Guadarrama y Somosierra  |
            /// | gre1  | Sierra de Gredos   |
            /// | nev1  | Sierra Nevada
            /// </param>
            /// <param name='dia'>
            /// | Código de día | Día |
            /// |----------|----------|
            /// | 0 | día actual  |
            /// | 1  | d+1 (mañana)   |
            /// | 2  | d+2 (pasado mañana)  |
            /// | 3  | d+3 (siguente a pasado mañana)
            /// </param>
            public static object PrediccióndemontañaTiempoactual(this IAEMETOpenData operations, string area, string dia)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PrediccióndemontañaTiempoactualAsync(area, dia), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predicción de montaña. Tiempo actual.
            /// </summary>
            /// Predicción meteorológica para la zona montañosa que se pasa como parámetro
            /// (area) con validez para el día (día).  Periodicidad de actualización:
            /// continuamente.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='area'>
            /// | Código de Área Montañosa | Área Montañosa |
            /// |----------|----------|
            /// | peu1 | Picos de Europa   |
            /// | nav1  | Pirineo Navarro   |
            /// | arn1  | Pirineo Aragonés  |
            /// | cat1  | Pirineo Catalán   |
            /// | rio1  | Ibérica Riojana   |
            /// | arn2  | Ibérica Aragonesa   |
            /// | mad2  | Sierras de Guadarrama y Somosierra  |
            /// | gre1  | Sierra de Gredos   |
            /// | nev1  | Sierra Nevada
            /// </param>
            /// <param name='dia'>
            /// | Código de día | Día |
            /// |----------|----------|
            /// | 0 | día actual  |
            /// | 1  | d+1 (mañana)   |
            /// | 2  | d+2 (pasado mañana)  |
            /// | 3  | d+3 (siguente a pasado mañana)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PrediccióndemontañaTiempoactualAsync(this IAEMETOpenData operations, string area, string dia, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PrediccióndemontañaTiempoactualWithHttpMessagesAsync(area, dia, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Información nivológica.
            /// </summary>
            /// Información nivológica para la zona montañosa que se pasa como parámetro
            /// (area).
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='area'>
            /// | Código de  Área Montañosa |  Área Montañosa |
            /// |----------|----------|
            /// | 0 | Pirineo Catalán  |
            /// | 1  | Pirineo Navarro y Aragonés
            /// </param>
            public static object Informacionnivologica(this IAEMETOpenData operations, string area)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).InformacionnivologicaAsync(area), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Información nivológica.
            /// </summary>
            /// Información nivológica para la zona montañosa que se pasa como parámetro
            /// (area).
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='area'>
            /// | Código de  Área Montañosa |  Área Montañosa |
            /// |----------|----------|
            /// | 0 | Pirineo Catalán  |
            /// | 1  | Pirineo Navarro y Aragonés
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> InformacionnivologicaAsync(this IAEMETOpenData operations, string area, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InformacionnivologicaWithHttpMessagesAsync(area, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predicción por municipios diaria. Tiempo actual.
            /// </summary>
            /// Predicción para el municipio que se pasa como parámetro (municipio).
            /// Periodicidad de actualización: continuamente.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='municipio'>
            /// Código de municipio
            /// http://www.ine.es/daco/daco42/codmun/codmunmapa.htm
            /// </param>
            public static object PredicciónpormunicipiosdiariaTiempoactual(this IAEMETOpenData operations, string municipio)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PredicciónpormunicipiosdiariaTiempoactualAsync(municipio), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predicción por municipios diaria. Tiempo actual.
            /// </summary>
            /// Predicción para el municipio que se pasa como parámetro (municipio).
            /// Periodicidad de actualización: continuamente.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='municipio'>
            /// Código de municipio
            /// http://www.ine.es/daco/daco42/codmun/codmunmapa.htm
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PredicciónpormunicipiosdiariaTiempoactualAsync(this IAEMETOpenData operations, string municipio, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredicciónpormunicipiosdiariaTiempoactualWithHttpMessagesAsync(municipio, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predicción por municipios horaria. Tiempo actual.
            /// </summary>
            /// Predicción horaria para el municipio que se pasa como parámetro
            /// (municipio). Presenta la información de hora en hora hasta 48 horas.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='municipio'>
            /// Código de municipio
            /// http://www.ine.es/daco/daco42/codmun/codmunmapa.htm
            /// </param>
            public static object PredicciónpormunicipioshorariaTiempoactual(this IAEMETOpenData operations, string municipio)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PredicciónpormunicipioshorariaTiempoactualAsync(municipio), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predicción por municipios horaria. Tiempo actual.
            /// </summary>
            /// Predicción horaria para el municipio que se pasa como parámetro
            /// (municipio). Presenta la información de hora en hora hasta 48 horas.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='municipio'>
            /// Código de municipio
            /// http://www.ine.es/daco/daco42/codmun/codmunmapa.htm
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PredicciónpormunicipioshorariaTiempoactualAsync(this IAEMETOpenData operations, string municipio, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredicciónpormunicipioshorariaTiempoactualWithHttpMessagesAsync(municipio, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predicción para las playas. Tiempo actual.
            /// </summary>
            /// La predicción diaria de la playa que se pasa como parámetro. Establece el
            /// estado de nubosidad para unas horas determinadas, las 11 y las 17 hora
            /// oficial. Se analiza también si se espera precipitación en el entorno de
            /// esas horas, entre las 08 y las 14 horas y entre las 14 y 20 horas.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='playa'>
            /// Código de playa
            /// http://www.aemet.es/documentos/es/eltiempo/prediccion/playas/Playas_codigos.csv
            /// </param>
            public static object PredicciónparalasplayasTiempoactual(this IAEMETOpenData operations, string playa)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PredicciónparalasplayasTiempoactualAsync(playa), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predicción para las playas. Tiempo actual.
            /// </summary>
            /// La predicción diaria de la playa que se pasa como parámetro. Establece el
            /// estado de nubosidad para unas horas determinadas, las 11 y las 17 hora
            /// oficial. Se analiza también si se espera precipitación en el entorno de
            /// esas horas, entre las 08 y las 14 horas y entre las 14 y 20 horas.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='playa'>
            /// Código de playa
            /// http://www.aemet.es/documentos/es/eltiempo/prediccion/playas/Playas_codigos.csv
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PredicciónparalasplayasTiempoactualAsync(this IAEMETOpenData operations, string playa, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredicciónparalasplayasTiempoactualWithHttpMessagesAsync(playa, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predicción de radiación ultravioleta (UVI).
            /// </summary>
            /// Predicción de Índice de radiación UV máximo en condiciones de cielo
            /// despejado para el día seleccionado.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dia'>
            /// | Código de día | Día |
            /// |----------|----------|
            /// | 0 | día actual  |
            /// | 1  | d+1 (mañana)   |
            /// | 2  | d+2 (pasado mañana)  |
            /// | 3  | d+3 (dentro de 3 días) |
            /// | 4  | d+4 (dentro de 4 días)
            /// </param>
            public static object PredicciónderadiaciónultravioletaUVI(this IAEMETOpenData operations, string dia)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PredicciónderadiaciónultravioletaUVIAsync(dia), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predicción de radiación ultravioleta (UVI).
            /// </summary>
            /// Predicción de Índice de radiación UV máximo en condiciones de cielo
            /// despejado para el día seleccionado.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dia'>
            /// | Código de día | Día |
            /// |----------|----------|
            /// | 0 | día actual  |
            /// | 1  | d+1 (mañana)   |
            /// | 2  | d+2 (pasado mañana)  |
            /// | 3  | d+3 (dentro de 3 días) |
            /// | 4  | d+4 (dentro de 4 días)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PredicciónderadiaciónultravioletaUVIAsync(this IAEMETOpenData operations, string dia, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredicciónderadiaciónultravioletaUVIWithHttpMessagesAsync(dia, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predicción marítima de alta mar.
            /// </summary>
            /// Predicción para un periodo de 24 horas de las condiciones meteorológicas
            /// para el área marítima pasada por parámetro.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='area'>
            /// | Código | Área de Alta Mar |
            /// |----------|----------|
            /// | 0 | Océano Atlántico al sur de 35º N   |
            /// | 1  | Océano Atlántico al norte de 30º N   |
            /// | 2  | Mar Mediterráneo
            /// </param>
            public static object Predicciónmarítimadealtamar(this IAEMETOpenData operations, string area)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PredicciónmarítimadealtamarAsync(area), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predicción marítima de alta mar.
            /// </summary>
            /// Predicción para un periodo de 24 horas de las condiciones meteorológicas
            /// para el área marítima pasada por parámetro.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='area'>
            /// | Código | Área de Alta Mar |
            /// |----------|----------|
            /// | 0 | Océano Atlántico al sur de 35º N   |
            /// | 1  | Océano Atlántico al norte de 30º N   |
            /// | 2  | Mar Mediterráneo
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PredicciónmarítimadealtamarAsync(this IAEMETOpenData operations, string area, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredicciónmarítimadealtamarWithHttpMessagesAsync(area, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predicción marítima costera.
            /// </summary>
            /// Predicción para un periodo de 24 horas de las condiciones meteorológicas
            /// para la zona costera pasada por parámetro.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='costa'>
            /// | Código | Área Costera |
            /// |----------|----------|
            /// | 42 | Costa de Andalucía Occidental y Ceuta   |
            /// | 47  | Costa de Andalucía Oriental y Melilla   |
            /// | 41  | Costa de Asturias, Cantabria y País Vasco  |
            /// | 45  | Costa de Cataluña   |
            /// | 40  | Costa de Galicia   |
            /// | 44  | Costa de Illes Balears   |
            /// | 43  | Costa de las Islas Canarias  |
            /// | 46  | Costa de Valencia y Murcia
            /// </param>
            public static object Predicciónmarítimacostera(this IAEMETOpenData operations, string costa)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PredicciónmarítimacosteraAsync(costa), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predicción marítima costera.
            /// </summary>
            /// Predicción para un periodo de 24 horas de las condiciones meteorológicas
            /// para la zona costera pasada por parámetro.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='costa'>
            /// | Código | Área Costera |
            /// |----------|----------|
            /// | 42 | Costa de Andalucía Occidental y Ceuta   |
            /// | 47  | Costa de Andalucía Oriental y Melilla   |
            /// | 41  | Costa de Asturias, Cantabria y País Vasco  |
            /// | 45  | Costa de Cataluña   |
            /// | 40  | Costa de Galicia   |
            /// | 44  | Costa de Illes Balears   |
            /// | 43  | Costa de las Islas Canarias  |
            /// | 46  | Costa de Valencia y Murcia
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PredicciónmarítimacosteraAsync(this IAEMETOpenData operations, string costa, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredicciónmarítimacosteraWithHttpMessagesAsync(costa, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predicción nacional hoy. Última elaborada.
            /// </summary>
            /// Predicción nacional para el día actual a la fecha de elaboración en
            /// formato texto. Actualización diaria. Hay días en los que este producto no
            /// se realiza. En ese caso se devuelve la predicción nacional última que se
            /// elaboró.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object PredicciónnacionalhoyTiempoactual(this IAEMETOpenData operations)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PredicciónnacionalhoyTiempoactualAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predicción nacional hoy. Última elaborada.
            /// </summary>
            /// Predicción nacional para el día actual a la fecha de elaboración en
            /// formato texto. Actualización diaria. Hay días en los que este producto no
            /// se realiza. En ese caso se devuelve la predicción nacional última que se
            /// elaboró.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PredicciónnacionalhoyTiempoactualAsync(this IAEMETOpenData operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredicciónnacionalhoyTiempoactualWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predicción nacional hoy. Archivo.
            /// </summary>
            /// Predicción nacional para el día correspondiente a la fecha que se pasa
            /// como parámetro en en formato texto. Actualización diaria. Hay días en los
            /// que este producto no se realiza. En ese caso se devuelve un 404 producto
            /// no existente.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fecha'>
            /// Fecha en formato (AAAA-MM-DD)
            /// </param>
            public static object PredicciónnacionalhoyArchivo(this IAEMETOpenData operations, string fecha)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PredicciónnacionalhoyArchivoAsync(fecha), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predicción nacional hoy. Archivo.
            /// </summary>
            /// Predicción nacional para el día correspondiente a la fecha que se pasa
            /// como parámetro en en formato texto. Actualización diaria. Hay días en los
            /// que este producto no se realiza. En ese caso se devuelve un 404 producto
            /// no existente.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fecha'>
            /// Fecha en formato (AAAA-MM-DD)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PredicciónnacionalhoyArchivoAsync(this IAEMETOpenData operations, string fecha, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredicciónnacionalhoyArchivoWithHttpMessagesAsync(fecha, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predicción nacional mañana. Tiempo actual.
            /// </summary>
            /// Predicción nacional para el día siguiente a la fecha de elaboración. En
            /// este caso la fecha de elaboración es el día actual. Actualización diaria.
            /// En el caso de que en el día actual  todavía no se haya elaborado se
            /// devolverá el último producto de predicción nacional para mañana elaborado.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object PredicciónnacionalmañanaTiempoactual(this IAEMETOpenData operations)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PredicciónnacionalmañanaTiempoactualAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predicción nacional mañana. Tiempo actual.
            /// </summary>
            /// Predicción nacional para el día siguiente a la fecha de elaboración. En
            /// este caso la fecha de elaboración es el día actual. Actualización diaria.
            /// En el caso de que en el día actual  todavía no se haya elaborado se
            /// devolverá el último producto de predicción nacional para mañana elaborado.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PredicciónnacionalmañanaTiempoactualAsync(this IAEMETOpenData operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredicciónnacionalmañanaTiempoactualWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predicción nacional mañana. Archivo.
            /// </summary>
            /// Predicción nacional para el día siguiente a la fecha de elaboración. En
            /// este caso la fecha de elaboración es la fecha que se pasa como parámetro.
            /// Actualización diaria.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fecha'>
            /// Día (AAAA-MM-DD)
            /// </param>
            public static object PredicciónnacionalmañanaArchivo(this IAEMETOpenData operations, string fecha)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PredicciónnacionalmañanaArchivoAsync(fecha), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predicción nacional mañana. Archivo.
            /// </summary>
            /// Predicción nacional para el día siguiente a la fecha de elaboración. En
            /// este caso la fecha de elaboración es la fecha que se pasa como parámetro.
            /// Actualización diaria.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fecha'>
            /// Día (AAAA-MM-DD)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PredicciónnacionalmañanaArchivoAsync(this IAEMETOpenData operations, string fecha, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredicciónnacionalmañanaArchivoWithHttpMessagesAsync(fecha, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predicción nacional medio plazo. Tiempo actual.
            /// </summary>
            /// Predicción nacional para medio plazo siguiente a la fecha de elaboración.
            /// En este caso la fecha de elaboración es el día actual. Actualización
            /// diaria. En el caso de que en el día actual  todavía no se haya elaborado
            /// se devolverá el último producto de predicción nacional para medio plazo
            /// elaborado.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object PredicciónnacionalmedioplazoTiempoactual(this IAEMETOpenData operations)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PredicciónnacionalmedioplazoTiempoactualAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predicción nacional medio plazo. Tiempo actual.
            /// </summary>
            /// Predicción nacional para medio plazo siguiente a la fecha de elaboración.
            /// En este caso la fecha de elaboración es el día actual. Actualización
            /// diaria. En el caso de que en el día actual  todavía no se haya elaborado
            /// se devolverá el último producto de predicción nacional para medio plazo
            /// elaborado.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PredicciónnacionalmedioplazoTiempoactualAsync(this IAEMETOpenData operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredicciónnacionalmedioplazoTiempoactualWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predicción nacional medio plazo. Archivo.
            /// </summary>
            /// Predicción nacional para el medio plazo siguiente a la fecha de
            /// elaboración. En este caso, la fecha de elaboración es la fecha que se
            /// pasa como parámetro. Actualización diaria.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fecha'>
            /// Día (AAAA-MM-DD)
            /// </param>
            public static object PredicciónnacionalmedioplazoArchivo(this IAEMETOpenData operations, string fecha)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PredicciónnacionalmedioplazoArchivoAsync(fecha), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predicción nacional medio plazo. Archivo.
            /// </summary>
            /// Predicción nacional para el medio plazo siguiente a la fecha de
            /// elaboración. En este caso, la fecha de elaboración es la fecha que se
            /// pasa como parámetro. Actualización diaria.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fecha'>
            /// Día (AAAA-MM-DD)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PredicciónnacionalmedioplazoArchivoAsync(this IAEMETOpenData operations, string fecha, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredicciónnacionalmedioplazoArchivoWithHttpMessagesAsync(fecha, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predicción nacional pasado mañana. Tiempo actual.
            /// </summary>
            /// Predicción nacional para pasado mañana siguiente a la fecha de
            /// elaboración. En este caso la fecha de elaboración es el día actual.
            /// Actualización diaria. En el caso de que en el día actual  todavía no se
            /// haya elaborado se devolverá el último producto de predicción nacional
            /// para pasado mañana elaborado.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object PredicciónnacionalpasadomañanaTiempoactual(this IAEMETOpenData operations)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PredicciónnacionalpasadomañanaTiempoactualAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predicción nacional pasado mañana. Tiempo actual.
            /// </summary>
            /// Predicción nacional para pasado mañana siguiente a la fecha de
            /// elaboración. En este caso la fecha de elaboración es el día actual.
            /// Actualización diaria. En el caso de que en el día actual  todavía no se
            /// haya elaborado se devolverá el último producto de predicción nacional
            /// para pasado mañana elaborado.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PredicciónnacionalpasadomañanaTiempoactualAsync(this IAEMETOpenData operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredicciónnacionalpasadomañanaTiempoactualWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predicción nacional pasado mañana. Archivo.
            /// </summary>
            /// Predicción nacional para pasado mañana siguiente a la fecha de
            /// elaboración. En este caso, la fecha de elaboración es la fecha que se
            /// pasa como parámetro. Actualización diaria.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fecha'>
            /// Día (AAAA-MM-DD)
            /// </param>
            public static object PredicciónnacionalpasadomañanaArchivo(this IAEMETOpenData operations, string fecha)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PredicciónnacionalpasadomañanaArchivoAsync(fecha), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predicción nacional pasado mañana. Archivo.
            /// </summary>
            /// Predicción nacional para pasado mañana siguiente a la fecha de
            /// elaboración. En este caso, la fecha de elaboración es la fecha que se
            /// pasa como parámetro. Actualización diaria.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fecha'>
            /// Día (AAAA-MM-DD)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PredicciónnacionalpasadomañanaArchivoAsync(this IAEMETOpenData operations, string fecha, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredicciónnacionalpasadomañanaArchivoWithHttpMessagesAsync(fecha, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predicción nacional tendencia. Tiempo actual.
            /// </summary>
            /// Predicción nacional para tendencia siguiente a la fecha de elaboración. En
            /// este caso la fecha de elaboración es el día actual. Actualización diaria.
            /// En el caso de que en el día actual  todavía no se haya elaborado se
            /// devolverá el último producto de predicción nacional para tendencia
            /// elaborado.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object PredicciónnacionaltendenciaTiempoactual(this IAEMETOpenData operations)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PredicciónnacionaltendenciaTiempoactualAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predicción nacional tendencia. Tiempo actual.
            /// </summary>
            /// Predicción nacional para tendencia siguiente a la fecha de elaboración. En
            /// este caso la fecha de elaboración es el día actual. Actualización diaria.
            /// En el caso de que en el día actual  todavía no se haya elaborado se
            /// devolverá el último producto de predicción nacional para tendencia
            /// elaborado.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PredicciónnacionaltendenciaTiempoactualAsync(this IAEMETOpenData operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredicciónnacionaltendenciaTiempoactualWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predicción nacional tendencia. Archivo.
            /// </summary>
            /// Predicción nacional para tendencia siguiente a la fecha de elaboración. En
            /// este caso, la fecha de elaboración es la fecha que se pasa como
            /// parámetro. Actualización diaria.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fecha'>
            /// Día (AAAA-MM-DD)
            /// </param>
            public static object PredicciónnacionaltendenciaArchivo(this IAEMETOpenData operations, string fecha)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PredicciónnacionaltendenciaArchivoAsync(fecha), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predicción nacional tendencia. Archivo.
            /// </summary>
            /// Predicción nacional para tendencia siguiente a la fecha de elaboración. En
            /// este caso, la fecha de elaboración es la fecha que se pasa como
            /// parámetro. Actualización diaria.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fecha'>
            /// Día (AAAA-MM-DD)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PredicciónnacionaltendenciaArchivoAsync(this IAEMETOpenData operations, string fecha, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredicciónnacionaltendenciaArchivoWithHttpMessagesAsync(fecha, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predicción provincia hoy. Tiempo actual.
            /// </summary>
            /// Predicción del día actual para la provincia que se pasa como parámetro. En
            /// el caso de que este producto no se haya elaborado todavía en el día
            /// actual, se retorna el último elaborado. Actualización continua y fija a
            /// las 14:00 Hora Oficial Peninsular.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provincia'>
            /// | Código Provincia | Provincia |
            /// |----------|----------|
            /// | 01  | Araba/Álaba   |
            /// | 01  | Araba/Álava   |
            /// | 02  | Albacete   |
            /// | 03  | Alacant/Alicante  |
            /// | 04  | Almería   |
            /// | 33  | Asturias   |
            /// | 05  | Ávila   |
            /// | 06  | Badajoz   |
            /// | 07  | Illes Ballears   |
            /// | 08  | Barcelona   |
            /// | 48  | Bizkaia   |
            /// | 09  | Burgos   |
            /// | 10  | Cáceres   |
            /// | 11  | Cádiz   |
            /// | 39  | Cantabria   |
            /// | 12  | Castelló/Castellón   |
            /// | 51  | Ceuta   |
            /// | 13  | Ciudad Real   |
            /// | 14  | Córdoba   |
            /// | 15  | A Coruña   |
            /// | 16  | Cuenca   |
            /// | 17  | Girona   |
            /// | 18  | Granada   |
            /// | 19  | Guadalajara   |
            /// | 20  | Gipuzkoa   |
            /// | 21  | Huelva   |
            /// | 22  | Huesca   |
            /// | 23  | Jaén   |
            /// | 24  | León   |
            /// | 25  | Lleida   |
            /// | 27  | Lugo   |
            /// | 28  | Madrid   |
            /// | 29  | Málaga   |
            /// | 52  | Melilla   |
            /// | 30  | Murcia   |
            /// | 31  | Navarra   |
            /// | 32  | Oursense   |
            /// | 34  | Palencia   |
            /// | 35  | Las Palmas   |
            /// | 36  | Pontevedra   |
            /// | 26  | La Rioja   |
            /// | 37  | Salamanca   |
            /// | 38  | Santa Cruz de Tenerife   |
            /// | 40  | Segovia   |
            /// | 41  | Sevilla   |
            /// | 42  | Soria   |
            /// | 43  | Tarragona   |
            /// | 44  | Teruel   |
            /// | 45  | Toledo   |
            /// | 46  | València/Valencia   |
            /// | 47  | Valladolid   |
            /// | 49  | Zamora   |
            /// | 50  | Zaragoza   |
            /// |
            /// </param>
            public static object PredicciónprovinciahoyTiempoactual(this IAEMETOpenData operations, string provincia)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PredicciónprovinciahoyTiempoactualAsync(provincia), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predicción provincia hoy. Tiempo actual.
            /// </summary>
            /// Predicción del día actual para la provincia que se pasa como parámetro. En
            /// el caso de que este producto no se haya elaborado todavía en el día
            /// actual, se retorna el último elaborado. Actualización continua y fija a
            /// las 14:00 Hora Oficial Peninsular.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provincia'>
            /// | Código Provincia | Provincia |
            /// |----------|----------|
            /// | 01  | Araba/Álaba   |
            /// | 01  | Araba/Álava   |
            /// | 02  | Albacete   |
            /// | 03  | Alacant/Alicante  |
            /// | 04  | Almería   |
            /// | 33  | Asturias   |
            /// | 05  | Ávila   |
            /// | 06  | Badajoz   |
            /// | 07  | Illes Ballears   |
            /// | 08  | Barcelona   |
            /// | 48  | Bizkaia   |
            /// | 09  | Burgos   |
            /// | 10  | Cáceres   |
            /// | 11  | Cádiz   |
            /// | 39  | Cantabria   |
            /// | 12  | Castelló/Castellón   |
            /// | 51  | Ceuta   |
            /// | 13  | Ciudad Real   |
            /// | 14  | Córdoba   |
            /// | 15  | A Coruña   |
            /// | 16  | Cuenca   |
            /// | 17  | Girona   |
            /// | 18  | Granada   |
            /// | 19  | Guadalajara   |
            /// | 20  | Gipuzkoa   |
            /// | 21  | Huelva   |
            /// | 22  | Huesca   |
            /// | 23  | Jaén   |
            /// | 24  | León   |
            /// | 25  | Lleida   |
            /// | 27  | Lugo   |
            /// | 28  | Madrid   |
            /// | 29  | Málaga   |
            /// | 52  | Melilla   |
            /// | 30  | Murcia   |
            /// | 31  | Navarra   |
            /// | 32  | Oursense   |
            /// | 34  | Palencia   |
            /// | 35  | Las Palmas   |
            /// | 36  | Pontevedra   |
            /// | 26  | La Rioja   |
            /// | 37  | Salamanca   |
            /// | 38  | Santa Cruz de Tenerife   |
            /// | 40  | Segovia   |
            /// | 41  | Sevilla   |
            /// | 42  | Soria   |
            /// | 43  | Tarragona   |
            /// | 44  | Teruel   |
            /// | 45  | Toledo   |
            /// | 46  | València/Valencia   |
            /// | 47  | Valladolid   |
            /// | 49  | Zamora   |
            /// | 50  | Zaragoza   |
            /// |
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PredicciónprovinciahoyTiempoactualAsync(this IAEMETOpenData operations, string provincia, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredicciónprovinciahoyTiempoactualWithHttpMessagesAsync(provincia, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predicción provincia hoy. Archivo.
            /// </summary>
            /// Predicción del día siguiente a la fecha que se pasa como parámetro para la
            /// provincia que se pasa como parámetro. Actualización continua y fija a las
            /// 14:00 Hora Oficial Peninsular del día que se pasa como parámetro.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provincia'>
            /// | Código Provincia | Provincia |
            /// |----------|----------|
            /// | 01  | Araba/Álaba   |
            /// | 01  | Araba/Álava   |
            /// | 02  | Albacete   |
            /// | 03  | Alacant/Alicante  |
            /// | 04  | Almería   |
            /// | 33  | Asturias   |
            /// | 05  | Ávila   |
            /// | 06  | Badajoz   |
            /// | 07  | Illes Ballears   |
            /// | 08  | Barcelona   |
            /// | 48  | Bizkaia   |
            /// | 09  | Burgos   |
            /// | 10  | Cáceres   |
            /// | 11  | Cádiz   |
            /// | 39  | Cantabria   |
            /// | 12  | Castelló/Castellón   |
            /// | 51  | Ceuta   |
            /// | 13  | Ciudad Real   |
            /// | 14  | Córdoba   |
            /// | 15  | A Coruña   |
            /// | 16  | Cuenca   |
            /// | 17  | Girona   |
            /// | 18  | Granada   |
            /// | 19  | Guadalajara   |
            /// | 20  | Gipuzkoa   |
            /// | 21  | Huelva   |
            /// | 22  | Huesca   |
            /// | 23  | Jaén   |
            /// | 24  | León   |
            /// | 25  | Lleida   |
            /// | 27  | Lugo   |
            /// | 28  | Madrid   |
            /// | 29  | Málaga   |
            /// | 52  | Melilla   |
            /// | 30  | Murcia   |
            /// | 31  | Navarra   |
            /// | 32  | Oursense   |
            /// | 34  | Palencia   |
            /// | 35  | Las Palmas   |
            /// | 36  | Pontevedra   |
            /// | 26  | La Rioja   |
            /// | 37  | Salamanca   |
            /// | 38  | Santa Cruz de Tenerife   |
            /// | 40  | Segovia   |
            /// | 41  | Sevilla   |
            /// | 42  | Soria   |
            /// | 43  | Tarragona   |
            /// | 44  | Teruel   |
            /// | 45  | Toledo   |
            /// | 46  | València/Valencia   |
            /// | 47  | Valladolid   |
            /// | 49  | Zamora   |
            /// | 50  | Zaragoza   |
            /// |
            /// </param>
            /// <param name='fecha'>
            /// Día de elaboración (AAAA-MM-DD)
            /// </param>
            public static object PredicciónprovinciahoyArchivo(this IAEMETOpenData operations, string provincia, string fecha)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PredicciónprovinciahoyArchivoAsync(provincia, fecha), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predicción provincia hoy. Archivo.
            /// </summary>
            /// Predicción del día siguiente a la fecha que se pasa como parámetro para la
            /// provincia que se pasa como parámetro. Actualización continua y fija a las
            /// 14:00 Hora Oficial Peninsular del día que se pasa como parámetro.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provincia'>
            /// | Código Provincia | Provincia |
            /// |----------|----------|
            /// | 01  | Araba/Álaba   |
            /// | 01  | Araba/Álava   |
            /// | 02  | Albacete   |
            /// | 03  | Alacant/Alicante  |
            /// | 04  | Almería   |
            /// | 33  | Asturias   |
            /// | 05  | Ávila   |
            /// | 06  | Badajoz   |
            /// | 07  | Illes Ballears   |
            /// | 08  | Barcelona   |
            /// | 48  | Bizkaia   |
            /// | 09  | Burgos   |
            /// | 10  | Cáceres   |
            /// | 11  | Cádiz   |
            /// | 39  | Cantabria   |
            /// | 12  | Castelló/Castellón   |
            /// | 51  | Ceuta   |
            /// | 13  | Ciudad Real   |
            /// | 14  | Córdoba   |
            /// | 15  | A Coruña   |
            /// | 16  | Cuenca   |
            /// | 17  | Girona   |
            /// | 18  | Granada   |
            /// | 19  | Guadalajara   |
            /// | 20  | Gipuzkoa   |
            /// | 21  | Huelva   |
            /// | 22  | Huesca   |
            /// | 23  | Jaén   |
            /// | 24  | León   |
            /// | 25  | Lleida   |
            /// | 27  | Lugo   |
            /// | 28  | Madrid   |
            /// | 29  | Málaga   |
            /// | 52  | Melilla   |
            /// | 30  | Murcia   |
            /// | 31  | Navarra   |
            /// | 32  | Oursense   |
            /// | 34  | Palencia   |
            /// | 35  | Las Palmas   |
            /// | 36  | Pontevedra   |
            /// | 26  | La Rioja   |
            /// | 37  | Salamanca   |
            /// | 38  | Santa Cruz de Tenerife   |
            /// | 40  | Segovia   |
            /// | 41  | Sevilla   |
            /// | 42  | Soria   |
            /// | 43  | Tarragona   |
            /// | 44  | Teruel   |
            /// | 45  | Toledo   |
            /// | 46  | València/Valencia   |
            /// | 47  | Valladolid   |
            /// | 49  | Zamora   |
            /// | 50  | Zaragoza   |
            /// |
            /// </param>
            /// <param name='fecha'>
            /// Día de elaboración (AAAA-MM-DD)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PredicciónprovinciahoyArchivoAsync(this IAEMETOpenData operations, string provincia, string fecha, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredicciónprovinciahoyArchivoWithHttpMessagesAsync(provincia, fecha, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predicción provincia mañana. Tiempo actual.
            /// </summary>
            /// Predicción del día siguiente para la provincia que se pasa como parámetro.
            /// En el caso de que este producto no se haya elaborado todavía en el día
            /// actual, se retorna el último elaborado. Actualización continua y fija a
            /// las 14:00 Hora Oficial Peninsular.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provincia'>
            /// | Código Provincia | Provincia |
            /// |----------|----------|
            /// | 01  | Araba/Álaba   |
            /// | 01  | Araba/Álava   |
            /// | 02  | Albacete   |
            /// | 03  | Alacant/Alicante  |
            /// | 04  | Almería   |
            /// | 33  | Asturias   |
            /// | 05  | Ávila   |
            /// | 06  | Badajoz   |
            /// | 07  | Illes Ballears   |
            /// | 08  | Barcelona   |
            /// | 48  | Bizkaia   |
            /// | 09  | Burgos   |
            /// | 10  | Cáceres   |
            /// | 11  | Cádiz   |
            /// | 39  | Cantabria   |
            /// | 12  | Castelló/Castellón   |
            /// | 51  | Ceuta   |
            /// | 13  | Ciudad Real   |
            /// | 14  | Córdoba   |
            /// | 15  | A Coruña   |
            /// | 16  | Cuenca   |
            /// | 17  | Girona   |
            /// | 18  | Granada   |
            /// | 19  | Guadalajara   |
            /// | 20  | Gipuzkoa   |
            /// | 21  | Huelva   |
            /// | 22  | Huesca   |
            /// | 23  | Jaén   |
            /// | 24  | León   |
            /// | 25  | Lleida   |
            /// | 27  | Lugo   |
            /// | 28  | Madrid   |
            /// | 29  | Málaga   |
            /// | 52  | Melilla   |
            /// | 30  | Murcia   |
            /// | 31  | Navarra   |
            /// | 32  | Oursense   |
            /// | 34  | Palencia   |
            /// | 35  | Las Palmas   |
            /// | 36  | Pontevedra   |
            /// | 26  | La Rioja   |
            /// | 37  | Salamanca   |
            /// | 38  | Santa Cruz de Tenerife   |
            /// | 40  | Segovia   |
            /// | 41  | Sevilla   |
            /// | 42  | Soria   |
            /// | 43  | Tarragona   |
            /// | 44  | Teruel   |
            /// | 45  | Toledo   |
            /// | 46  | València/Valencia   |
            /// | 47  | Valladolid   |
            /// | 49  | Zamora   |
            /// | 50  | Zaragoza   |
            /// |
            /// </param>
            public static object PredicciónprovinciamañanaTiempoactual(this IAEMETOpenData operations, string provincia)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PredicciónprovinciamañanaTiempoactualAsync(provincia), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predicción provincia mañana. Tiempo actual.
            /// </summary>
            /// Predicción del día siguiente para la provincia que se pasa como parámetro.
            /// En el caso de que este producto no se haya elaborado todavía en el día
            /// actual, se retorna el último elaborado. Actualización continua y fija a
            /// las 14:00 Hora Oficial Peninsular.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provincia'>
            /// | Código Provincia | Provincia |
            /// |----------|----------|
            /// | 01  | Araba/Álaba   |
            /// | 01  | Araba/Álava   |
            /// | 02  | Albacete   |
            /// | 03  | Alacant/Alicante  |
            /// | 04  | Almería   |
            /// | 33  | Asturias   |
            /// | 05  | Ávila   |
            /// | 06  | Badajoz   |
            /// | 07  | Illes Ballears   |
            /// | 08  | Barcelona   |
            /// | 48  | Bizkaia   |
            /// | 09  | Burgos   |
            /// | 10  | Cáceres   |
            /// | 11  | Cádiz   |
            /// | 39  | Cantabria   |
            /// | 12  | Castelló/Castellón   |
            /// | 51  | Ceuta   |
            /// | 13  | Ciudad Real   |
            /// | 14  | Córdoba   |
            /// | 15  | A Coruña   |
            /// | 16  | Cuenca   |
            /// | 17  | Girona   |
            /// | 18  | Granada   |
            /// | 19  | Guadalajara   |
            /// | 20  | Gipuzkoa   |
            /// | 21  | Huelva   |
            /// | 22  | Huesca   |
            /// | 23  | Jaén   |
            /// | 24  | León   |
            /// | 25  | Lleida   |
            /// | 27  | Lugo   |
            /// | 28  | Madrid   |
            /// | 29  | Málaga   |
            /// | 52  | Melilla   |
            /// | 30  | Murcia   |
            /// | 31  | Navarra   |
            /// | 32  | Oursense   |
            /// | 34  | Palencia   |
            /// | 35  | Las Palmas   |
            /// | 36  | Pontevedra   |
            /// | 26  | La Rioja   |
            /// | 37  | Salamanca   |
            /// | 38  | Santa Cruz de Tenerife   |
            /// | 40  | Segovia   |
            /// | 41  | Sevilla   |
            /// | 42  | Soria   |
            /// | 43  | Tarragona   |
            /// | 44  | Teruel   |
            /// | 45  | Toledo   |
            /// | 46  | València/Valencia   |
            /// | 47  | Valladolid   |
            /// | 49  | Zamora   |
            /// | 50  | Zaragoza   |
            /// |
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PredicciónprovinciamañanaTiempoactualAsync(this IAEMETOpenData operations, string provincia, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredicciónprovinciamañanaTiempoactualWithHttpMessagesAsync(provincia, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predicción provincia mañana. Archivo.
            /// </summary>
            /// Predicción del día siguiente a la fecha que se pasa como parámetro para la
            /// provincia que se pasa como parámetro. Actualización continua y fija a las
            /// 14:00 Hora Oficial Peninsular del día que se pasa como parámetro.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provincia'>
            /// | Código Provincia | Provincia |
            /// |----------|----------|
            /// | 01  | Araba/Álaba   |
            /// | 01  | Araba/Álava   |
            /// | 02  | Albacete   |
            /// | 03  | Alacant/Alicante  |
            /// | 04  | Almería   |
            /// | 33  | Asturias   |
            /// | 05  | Ávila   |
            /// | 06  | Badajoz   |
            /// | 07  | Illes Ballears   |
            /// | 08  | Barcelona   |
            /// | 48  | Bizkaia   |
            /// | 09  | Burgos   |
            /// | 10  | Cáceres   |
            /// | 11  | Cádiz   |
            /// | 39  | Cantabria   |
            /// | 12  | Castelló/Castellón   |
            /// | 51  | Ceuta   |
            /// | 13  | Ciudad Real   |
            /// | 14  | Córdoba   |
            /// | 15  | A Coruña   |
            /// | 16  | Cuenca   |
            /// | 17  | Girona   |
            /// | 18  | Granada   |
            /// | 19  | Guadalajara   |
            /// | 20  | Gipuzkoa   |
            /// | 21  | Huelva   |
            /// | 22  | Huesca   |
            /// | 23  | Jaén   |
            /// | 24  | León   |
            /// | 25  | Lleida   |
            /// | 27  | Lugo   |
            /// | 28  | Madrid   |
            /// | 29  | Málaga   |
            /// | 52  | Melilla   |
            /// | 30  | Murcia   |
            /// | 31  | Navarra   |
            /// | 32  | Oursense   |
            /// | 34  | Palencia   |
            /// | 35  | Las Palmas   |
            /// | 36  | Pontevedra   |
            /// | 26  | La Rioja   |
            /// | 37  | Salamanca   |
            /// | 38  | Santa Cruz de Tenerife   |
            /// | 40  | Segovia   |
            /// | 41  | Sevilla   |
            /// | 42  | Soria   |
            /// | 43  | Tarragona   |
            /// | 44  | Teruel   |
            /// | 45  | Toledo   |
            /// | 46  | València/Valencia   |
            /// | 47  | Valladolid   |
            /// | 49  | Zamora   |
            /// | 50  | Zaragoza   |
            /// |
            /// </param>
            /// <param name='fecha'>
            /// Día de elaboración (AAAA-MM-DD)
            /// </param>
            public static object PredicciónprovinciamañanaArchivo(this IAEMETOpenData operations, string provincia, string fecha)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PredicciónprovinciamañanaArchivoAsync(provincia, fecha), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predicción provincia mañana. Archivo.
            /// </summary>
            /// Predicción del día siguiente a la fecha que se pasa como parámetro para la
            /// provincia que se pasa como parámetro. Actualización continua y fija a las
            /// 14:00 Hora Oficial Peninsular del día que se pasa como parámetro.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provincia'>
            /// | Código Provincia | Provincia |
            /// |----------|----------|
            /// | 01  | Araba/Álaba   |
            /// | 01  | Araba/Álava   |
            /// | 02  | Albacete   |
            /// | 03  | Alacant/Alicante  |
            /// | 04  | Almería   |
            /// | 33  | Asturias   |
            /// | 05  | Ávila   |
            /// | 06  | Badajoz   |
            /// | 07  | Illes Ballears   |
            /// | 08  | Barcelona   |
            /// | 48  | Bizkaia   |
            /// | 09  | Burgos   |
            /// | 10  | Cáceres   |
            /// | 11  | Cádiz   |
            /// | 39  | Cantabria   |
            /// | 12  | Castelló/Castellón   |
            /// | 51  | Ceuta   |
            /// | 13  | Ciudad Real   |
            /// | 14  | Córdoba   |
            /// | 15  | A Coruña   |
            /// | 16  | Cuenca   |
            /// | 17  | Girona   |
            /// | 18  | Granada   |
            /// | 19  | Guadalajara   |
            /// | 20  | Gipuzkoa   |
            /// | 21  | Huelva   |
            /// | 22  | Huesca   |
            /// | 23  | Jaén   |
            /// | 24  | León   |
            /// | 25  | Lleida   |
            /// | 27  | Lugo   |
            /// | 28  | Madrid   |
            /// | 29  | Málaga   |
            /// | 52  | Melilla   |
            /// | 30  | Murcia   |
            /// | 31  | Navarra   |
            /// | 32  | Oursense   |
            /// | 34  | Palencia   |
            /// | 35  | Las Palmas   |
            /// | 36  | Pontevedra   |
            /// | 26  | La Rioja   |
            /// | 37  | Salamanca   |
            /// | 38  | Santa Cruz de Tenerife   |
            /// | 40  | Segovia   |
            /// | 41  | Sevilla   |
            /// | 42  | Soria   |
            /// | 43  | Tarragona   |
            /// | 44  | Teruel   |
            /// | 45  | Toledo   |
            /// | 46  | València/Valencia   |
            /// | 47  | Valladolid   |
            /// | 49  | Zamora   |
            /// | 50  | Zaragoza   |
            /// |
            /// </param>
            /// <param name='fecha'>
            /// Día de elaboración (AAAA-MM-DD)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PredicciónprovinciamañanaArchivoAsync(this IAEMETOpenData operations, string provincia, string fecha, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredicciónprovinciamañanaArchivoWithHttpMessagesAsync(provincia, fecha, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Balance hídrico nacional (documento).
            /// </summary>
            /// Se obtiene, para la decema y el año pasados por parámetro, el Boletín
            /// Hídrico Nacional que se elabora cada diez días. Se presenta información
            /// resumida de forma distribuida para todo el territorio nacional de
            /// diferentes variables, en las que se incluye informaciones de la
            /// precipitación y la evapotranspiración potencial acumuladas desde el 1 de
            /// septiembre.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='anio'>
            /// Año (AAAA)
            /// </param>
            /// <param name='decena'>
            /// Decena de 01 (primera decena) a 36 (última decena)
            /// </param>
            public static object Balancehídriconacionaldocumento(this IAEMETOpenData operations, string anio, string decena)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).BalancehídriconacionaldocumentoAsync(anio, decena), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Balance hídrico nacional (documento).
            /// </summary>
            /// Se obtiene, para la decema y el año pasados por parámetro, el Boletín
            /// Hídrico Nacional que se elabora cada diez días. Se presenta información
            /// resumida de forma distribuida para todo el territorio nacional de
            /// diferentes variables, en las que se incluye informaciones de la
            /// precipitación y la evapotranspiración potencial acumuladas desde el 1 de
            /// septiembre.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='anio'>
            /// Año (AAAA)
            /// </param>
            /// <param name='decena'>
            /// Decena de 01 (primera decena) a 36 (última decena)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BalancehídriconacionaldocumentoAsync(this IAEMETOpenData operations, string anio, string decena, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BalancehídriconacionaldocumentoWithHttpMessagesAsync(anio, decena, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resumen mensual climatológico nacional (documento).
            /// </summary>
            /// Resumen climatológico nacional, para el año y mes pasado por parámetro,
            /// sobre el estado del clima y la evolución de las principales variables
            /// climáticas, en especial temperatura y precipitación, a nivel mensual,
            /// estacional y anual.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='anio'>
            /// Año (AAAA)
            /// </param>
            /// <param name='mes'>
            /// Mes (mm)
            /// </param>
            public static object Resumenmensualclimatológiconacionaldocumento(this IAEMETOpenData operations, string anio, string mes)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).ResumenmensualclimatológiconacionaldocumentoAsync(anio, mes), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resumen mensual climatológico nacional (documento).
            /// </summary>
            /// Resumen climatológico nacional, para el año y mes pasado por parámetro,
            /// sobre el estado del clima y la evolución de las principales variables
            /// climáticas, en especial temperatura y precipitación, a nivel mensual,
            /// estacional y anual.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='anio'>
            /// Año (AAAA)
            /// </param>
            /// <param name='mes'>
            /// Mes (mm)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ResumenmensualclimatológiconacionaldocumentoAsync(this IAEMETOpenData operations, string anio, string mes, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResumenmensualclimatológiconacionaldocumentoWithHttpMessagesAsync(anio, mes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Capas SHAPE de estaciones climatológicas de AEMET.
            /// </summary>
            /// Capas SHAPE de las distintas estaciones climatológicas de AEMET:
            /// automáticas, completas, pluviométricas y termométricas.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tipoestacion'>
            /// | Código | Tipo de Estación |
            /// |----------|----------|
            /// | automaticas  | Estaciones Automáticas   |
            /// | completas  | Estaciones Completas   |
            /// | pluviometricas  | Estaciones Pluviométricas   |
            /// | termometricas  | Estaciones Termométricas
            /// </param>
            public static object CapasSHAPEdeestacionesclimatológicas(this IAEMETOpenData operations, string tipoestacion)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).CapasSHAPEdeestacionesclimatológicasAsync(tipoestacion), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Capas SHAPE de estaciones climatológicas de AEMET.
            /// </summary>
            /// Capas SHAPE de las distintas estaciones climatológicas de AEMET:
            /// automáticas, completas, pluviométricas y termométricas.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tipoestacion'>
            /// | Código | Tipo de Estación |
            /// |----------|----------|
            /// | automaticas  | Estaciones Automáticas   |
            /// | completas  | Estaciones Completas   |
            /// | pluviometricas  | Estaciones Pluviométricas   |
            /// | termometricas  | Estaciones Termométricas
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CapasSHAPEdeestacionesclimatológicasAsync(this IAEMETOpenData operations, string tipoestacion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CapasSHAPEdeestacionesclimatológicasWithHttpMessagesAsync(tipoestacion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Datos de contaminación de fondo. Tiempo actual.
            /// </summary>
            /// Ficheros diarios con datos diezminutales de la estación de la red de
            /// contaminación de fondo EMEP/VAG/CAMP pasada por parámetro, de
            /// temperatura, presión, humedad, viento (dirección y velocidad), radiación
            /// global, precipitación y 4 componentes químicos: O3,SO2,NO,NO2 y PM10. Los
            /// datos se encuentran en formato FINN (propio del Ministerio de Medio
            /// Ambiente). Periodicidad: cada hora.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nombreEstacion'>
            /// | Código | Estación de la Red EMEP |
            /// |----------|----------|
            /// | 11  | Barcarrota (Badajoz)   |
            /// | 10  | Cabo de Creus (Girona)   |
            /// | 09  | Campisábalos (Guadalajara)   |
            /// | 17  | Doñana (Huelva)  |
            /// | 14  | Els Torms (Lleida)   |
            /// | 06  | Mahón (Illes Balears)   |
            /// | 08  | Niembro-Llanes (Asturias)   |
            /// | 05  | Noia (A Coruña)   |
            /// | 16  | O Saviñao (Lugo)   |
            /// | 13  | Peñausende (Zamora)   |
            /// | 01  | San Pablo de los Montes (Toledo)   |
            /// | 07  | Víznar (Granada)   |
            /// | 12  | Zarra (Valencia)
            /// </param>
            public static object DatosdecontaminacióndefondoTiempoactual(this IAEMETOpenData operations, string nombreEstacion)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).DatosdecontaminacióndefondoTiempoactualAsync(nombreEstacion), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Datos de contaminación de fondo. Tiempo actual.
            /// </summary>
            /// Ficheros diarios con datos diezminutales de la estación de la red de
            /// contaminación de fondo EMEP/VAG/CAMP pasada por parámetro, de
            /// temperatura, presión, humedad, viento (dirección y velocidad), radiación
            /// global, precipitación y 4 componentes químicos: O3,SO2,NO,NO2 y PM10. Los
            /// datos se encuentran en formato FINN (propio del Ministerio de Medio
            /// Ambiente). Periodicidad: cada hora.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nombreEstacion'>
            /// | Código | Estación de la Red EMEP |
            /// |----------|----------|
            /// | 11  | Barcarrota (Badajoz)   |
            /// | 10  | Cabo de Creus (Girona)   |
            /// | 09  | Campisábalos (Guadalajara)   |
            /// | 17  | Doñana (Huelva)  |
            /// | 14  | Els Torms (Lleida)   |
            /// | 06  | Mahón (Illes Balears)   |
            /// | 08  | Niembro-Llanes (Asturias)   |
            /// | 05  | Noia (A Coruña)   |
            /// | 16  | O Saviñao (Lugo)   |
            /// | 13  | Peñausende (Zamora)   |
            /// | 01  | San Pablo de los Montes (Toledo)   |
            /// | 07  | Víznar (Granada)   |
            /// | 12  | Zarra (Valencia)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DatosdecontaminacióndefondoTiempoactualAsync(this IAEMETOpenData operations, string nombreEstacion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DatosdecontaminacióndefondoTiempoactualWithHttpMessagesAsync(nombreEstacion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Contenido total de ozono. Tiempo actual.
            /// </summary>
            /// Dato medio diario de contenido total de ozono. Cada 24 h (actualmente, en
            /// fines de semana, festivos y vacaciones no se genera por la falta de
            /// personal en el Centro Radiométrico Nacional).
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object ContenidototaldeozonoTiempoactual(this IAEMETOpenData operations)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).ContenidototaldeozonoTiempoactualAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Contenido total de ozono. Tiempo actual.
            /// </summary>
            /// Dato medio diario de contenido total de ozono. Cada 24 h (actualmente, en
            /// fines de semana, festivos y vacaciones no se genera por la falta de
            /// personal en el Centro Radiométrico Nacional).
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ContenidototaldeozonoTiempoactualAsync(this IAEMETOpenData operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ContenidototaldeozonoTiempoactualWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Perfiles verticales de ozono. Tiempo actual.
            /// </summary>
            /// Perfil Vertical de Ozono de la estación pasada por parámetro.
            /// Periodicidad: cada 7 días.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='estacion'>
            /// | Código | Estación |
            /// |----------|----------|
            /// | canarias  | Izaña   |
            /// | peninsula  | Madrid
            /// </param>
            public static object PerfilesverticalesdeozonoTiempoactual(this IAEMETOpenData operations, string estacion)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).PerfilesverticalesdeozonoTiempoactualAsync(estacion), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Perfiles verticales de ozono. Tiempo actual.
            /// </summary>
            /// Perfil Vertical de Ozono de la estación pasada por parámetro.
            /// Periodicidad: cada 7 días.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='estacion'>
            /// | Código | Estación |
            /// |----------|----------|
            /// | canarias  | Izaña   |
            /// | peninsula  | Madrid
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PerfilesverticalesdeozonoTiempoactualAsync(this IAEMETOpenData operations, string estacion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PerfilesverticalesdeozonoTiempoactualWithHttpMessagesAsync(estacion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Datos de radiación global, directa o difusa. Tiempo actual.
            /// </summary>
            /// Datos horarios (HORA SOLAR VERDADERA) acumulados de radiación  global,
            /// directa, difusa e infrarroja, y datos semihorarios  (HORA SOLAR
            /// VERDADERA) acumulados de radiación ultravioleta eritemática.Datos diarios
            /// acumulados  de radiación global, directa, difusa, ultravioleta
            /// eritemática e infrarroja. Periodicidad: Cada 24h (actualmente en fines de
            /// semana, festivos y vacaciones, no se genera por la ausencia de personal
            /// en el Centro Radiométrico Nacional).
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object DatosderadiaciónglobaldirectaodifusaTiempoactual(this IAEMETOpenData operations)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).DatosderadiaciónglobaldirectaodifusaTiempoactualAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Datos de radiación global, directa o difusa. Tiempo actual.
            /// </summary>
            /// Datos horarios (HORA SOLAR VERDADERA) acumulados de radiación  global,
            /// directa, difusa e infrarroja, y datos semihorarios  (HORA SOLAR
            /// VERDADERA) acumulados de radiación ultravioleta eritemática.Datos diarios
            /// acumulados  de radiación global, directa, difusa, ultravioleta
            /// eritemática e infrarroja. Periodicidad: Cada 24h (actualmente en fines de
            /// semana, festivos y vacaciones, no se genera por la ausencia de personal
            /// en el Centro Radiométrico Nacional).
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DatosderadiaciónglobaldirectaodifusaTiempoactualAsync(this IAEMETOpenData operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DatosderadiaciónglobaldirectaodifusaTiempoactualWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Imagen composición nacional radares. Tiempo actual estándar.
            /// </summary>
            /// Imagen composición nacional radares. Tiempo actual estándar. Periodicidad:
            /// 30 minutos.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object ImagencomposiciónnacionalradaresTiempoactualestándar(this IAEMETOpenData operations)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).ImagencomposiciónnacionalradaresTiempoactualestándarAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Imagen composición nacional radares. Tiempo actual estándar.
            /// </summary>
            /// Imagen composición nacional radares. Tiempo actual estándar. Periodicidad:
            /// 30 minutos.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ImagencomposiciónnacionalradaresTiempoactualestándarAsync(this IAEMETOpenData operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ImagencomposiciónnacionalradaresTiempoactualestándarWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Imagen gráfica radar regional. Tiempo actual estándar.
            /// </summary>
            /// Imagen del radar regional de la región pasada por parámetro. Tiempo actual
            /// estándar. Periodicidad: 10 minutos.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='radar'>
            /// | Código | Radar |
            /// |----------|----------|
            /// | am  | Almería   |
            /// | sa  | Asturias   |
            /// | pm  | Illes Balears   |
            /// | ba  | Barcelona  |
            /// | cc  | Cáceres   |
            /// | co  | A Coruña   |
            /// | ma  | Madrid   |
            /// | ml  | Málaga   |
            /// | mu  | Murcia   |
            /// | vd  | Palencia   |
            /// | ca  | Las Palmas   |
            /// | se  | Sevilla   |
            /// | va  | Valencia   |
            /// | ss  | Vizcaya   |
            /// | za  | Zaragoza
            /// </param>
            public static object RadarRegional(this IAEMETOpenData operations, string radar)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).RadarRegionalAsync(radar), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Imagen gráfica radar regional. Tiempo actual estándar.
            /// </summary>
            /// Imagen del radar regional de la región pasada por parámetro. Tiempo actual
            /// estándar. Periodicidad: 10 minutos.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='radar'>
            /// | Código | Radar |
            /// |----------|----------|
            /// | am  | Almería   |
            /// | sa  | Asturias   |
            /// | pm  | Illes Balears   |
            /// | ba  | Barcelona  |
            /// | cc  | Cáceres   |
            /// | co  | A Coruña   |
            /// | ma  | Madrid   |
            /// | ml  | Málaga   |
            /// | mu  | Murcia   |
            /// | vd  | Palencia   |
            /// | ca  | Las Palmas   |
            /// | se  | Sevilla   |
            /// | va  | Valencia   |
            /// | ss  | Vizcaya   |
            /// | za  | Zaragoza
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RadarRegionalAsync(this IAEMETOpenData operations, string radar, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RadarRegionalWithHttpMessagesAsync(radar, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Mapa con los rayos registrados en periodo standard. Último elaborado.
            /// </summary>
            /// Imagen de las descargas caídas en el territorio nacional durante un
            /// período de 12 horas.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object MapaconlosrayosregistradosenperiodostandardÚltimoelaborado(this IAEMETOpenData operations)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).MapaconlosrayosregistradosenperiodostandardÚltimoelaboradoAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Mapa con los rayos registrados en periodo standard. Último elaborado.
            /// </summary>
            /// Imagen de las descargas caídas en el territorio nacional durante un
            /// período de 12 horas.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> MapaconlosrayosregistradosenperiodostandardÚltimoelaboradoAsync(this IAEMETOpenData operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MapaconlosrayosregistradosenperiodostandardÚltimoelaboradoWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Índice normalizado de vegetación.
            /// </summary>
            /// Esta imagen se realiza con una combinación de los datos del canal visible
            /// y del infrarrojo cercano del satélite NOAA-19, que nos da una idea del
            /// desarrollo de la vegetación. Esto es así debido a que la vegetación
            /// absorbe fuertemente la radiación del canal visible, pero refleja
            /// fuertemente la del infrarrojo cercano. Esta imagen se renueva los jueves
            /// a última hora y contiene los datos acumulados de la última semana.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Índicenormalizadodevegetación(this IAEMETOpenData operations)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).ÍndicenormalizadodevegetaciónAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Índice normalizado de vegetación.
            /// </summary>
            /// Esta imagen se realiza con una combinación de los datos del canal visible
            /// y del infrarrojo cercano del satélite NOAA-19, que nos da una idea del
            /// desarrollo de la vegetación. Esto es así debido a que la vegetación
            /// absorbe fuertemente la radiación del canal visible, pero refleja
            /// fuertemente la del infrarrojo cercano. Esta imagen se renueva los jueves
            /// a última hora y contiene los datos acumulados de la última semana.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ÍndicenormalizadodevegetaciónAsync(this IAEMETOpenData operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ÍndicenormalizadodevegetaciónWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Temperatura del agua del mar.
            /// </summary>
            /// Imagen obtenida con una combinación de los datos de los canales
            /// infrarrojos del satélite NOAA-19, que nos da la temperatura de la
            /// superficie del mar. Esta imagen se renueva todos los días a última hora y
            /// contiene los datos acumulados de los últimos siete días.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Temperaturadelaguadelmar(this IAEMETOpenData operations)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).TemperaturadelaguadelmarAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Temperatura del agua del mar.
            /// </summary>
            /// Imagen obtenida con una combinación de los datos de los canales
            /// infrarrojos del satélite NOAA-19, que nos da la temperatura de la
            /// superficie del mar. Esta imagen se renueva todos los días a última hora y
            /// contiene los datos acumulados de los últimos siete días.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> TemperaturadelaguadelmarAsync(this IAEMETOpenData operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TemperaturadelaguadelmarWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Climatologías diarias.
            /// </summary>
            /// Valores climatológicos para el rango de fechas y la estación seleccionada.
            /// Periodicidad: 1 vez al día.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fechaIniStr'>
            /// Fecha Inicial (AAAA-MM-DDTHH:MM:SSUTC)
            /// </param>
            /// <param name='fechaFinStr'>
            /// Fecha Final (AAAA-MM-DDTHH:MM:SSUTC)
            /// </param>
            /// <param name='idema'>
            /// Indicativo climatológico de la EMA. Puede introducir varios indicativos
            /// separados por comas (,)
            /// </param>
            public static object Climatologíasdiarias(this IAEMETOpenData operations, string fechaIniStr, string fechaFinStr, string idema)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).ClimatologíasdiariasAsync(fechaIniStr, fechaFinStr, idema), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Climatologías diarias.
            /// </summary>
            /// Valores climatológicos para el rango de fechas y la estación seleccionada.
            /// Periodicidad: 1 vez al día.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fechaIniStr'>
            /// Fecha Inicial (AAAA-MM-DDTHH:MM:SSUTC)
            /// </param>
            /// <param name='fechaFinStr'>
            /// Fecha Final (AAAA-MM-DDTHH:MM:SSUTC)
            /// </param>
            /// <param name='idema'>
            /// Indicativo climatológico de la EMA. Puede introducir varios indicativos
            /// separados por comas (,)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ClimatologíasdiariasAsync(this IAEMETOpenData operations, string fechaIniStr, string fechaFinStr, string idema, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ClimatologíasdiariasWithHttpMessagesAsync(fechaIniStr, fechaFinStr, idema, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Estaciones por indicativo.
            /// </summary>
            /// Características de la estación climatológica pasada por parámetro.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='estaciones'>
            /// Listado de indicativos climatológicos (id1,id2,id3,...,idn)
            /// </param>
            public static object Estacionesporindicativo(this IAEMETOpenData operations, string estaciones)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).EstacionesporindicativoAsync(estaciones), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Estaciones por indicativo.
            /// </summary>
            /// Características de la estación climatológica pasada por parámetro.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='estaciones'>
            /// Listado de indicativos climatológicos (id1,id2,id3,...,idn)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> EstacionesporindicativoAsync(this IAEMETOpenData operations, string estaciones, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EstacionesporindicativoWithHttpMessagesAsync(estaciones, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Inventario de estaciones (valores climatológicos).
            /// </summary>
            /// Inventario con las características de todas las estaciones climatológicas.
            /// Periodicidad: 1 vez al día.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Inventariodeestacionesvaloresclimatológicos(this IAEMETOpenData operations)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).InventariodeestacionesvaloresclimatológicosAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Inventario de estaciones (valores climatológicos).
            /// </summary>
            /// Inventario con las características de todas las estaciones climatológicas.
            /// Periodicidad: 1 vez al día.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> InventariodeestacionesvaloresclimatológicosAsync(this IAEMETOpenData operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InventariodeestacionesvaloresclimatológicosWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Climatologías mensuales anuales.
            /// </summary>
            /// Valores medios mensuales y anuales de los datos climatológicos para la
            /// estación y el periodo de años pasados por parámetro. Periodicidad: 1 vez
            /// al día.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='anioIniStr'>
            /// Año Inicial (AAAA)
            /// </param>
            /// <param name='anioFinStr'>
            /// Año Final (AAAA)
            /// </param>
            /// <param name='idema'>
            /// Indicativo climatológico de la EMA
            /// </param>
            public static object Climatologíasmensualesanuales(this IAEMETOpenData operations, string anioIniStr, string anioFinStr, string idema)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).ClimatologíasmensualesanualesAsync(anioIniStr, anioFinStr, idema), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Climatologías mensuales anuales.
            /// </summary>
            /// Valores medios mensuales y anuales de los datos climatológicos para la
            /// estación y el periodo de años pasados por parámetro. Periodicidad: 1 vez
            /// al día.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='anioIniStr'>
            /// Año Inicial (AAAA)
            /// </param>
            /// <param name='anioFinStr'>
            /// Año Final (AAAA)
            /// </param>
            /// <param name='idema'>
            /// Indicativo climatológico de la EMA
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ClimatologíasmensualesanualesAsync(this IAEMETOpenData operations, string anioIniStr, string anioFinStr, string idema, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ClimatologíasmensualesanualesWithHttpMessagesAsync(anioIniStr, anioFinStr, idema, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Climatologías normales (1981-2010).
            /// </summary>
            /// Valores climatológicos normales (periodo 1981-2010) para la estación
            /// pasada por parámetro. Periodicidad: 1 vez al día.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idema'>
            /// Indicativo climatológico de la EMA
            /// </param>
            public static object Climatologíasnormales19812010(this IAEMETOpenData operations, string idema)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).Climatologíasnormales19812010Async(idema), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Climatologías normales (1981-2010).
            /// </summary>
            /// Valores climatológicos normales (periodo 1981-2010) para la estación
            /// pasada por parámetro. Periodicidad: 1 vez al día.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idema'>
            /// Indicativo climatológico de la EMA
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Climatologíasnormales19812010Async(this IAEMETOpenData operations, string idema, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Climatologíasnormales19812010WithHttpMessagesAsync(idema, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Valores extremos.
            /// </summary>
            /// Valores extremos para la estación y la variable (precipitación,
            /// temperatura y viento) pasadas por parámetro. Periodicidad: 1 vez al día.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parametro'>
            /// | Código | Parámetro Meteorológico |
            /// |----------|----------|
            /// | P  | Precipitación   |
            /// | T  | Temperatura   |
            /// | V  | Viento
            /// </param>
            /// <param name='idema'>
            /// Indicativo climatológico de la EMA
            /// </param>
            public static object Valoresextremos(this IAEMETOpenData operations, string parametro, string idema)
            {
                return Task.Factory.StartNew(s => ((IAEMETOpenData)s).ValoresextremosAsync(parametro, idema), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Valores extremos.
            /// </summary>
            /// Valores extremos para la estación y la variable (precipitación,
            /// temperatura y viento) pasadas por parámetro. Periodicidad: 1 vez al día.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parametro'>
            /// | Código | Parámetro Meteorológico |
            /// |----------|----------|
            /// | P  | Precipitación   |
            /// | T  | Temperatura   |
            /// | V  | Viento
            /// </param>
            /// <param name='idema'>
            /// Indicativo climatológico de la EMA
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ValoresextremosAsync(this IAEMETOpenData operations, string parametro, string idema, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ValoresextremosWithHttpMessagesAsync(parametro, idema, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
