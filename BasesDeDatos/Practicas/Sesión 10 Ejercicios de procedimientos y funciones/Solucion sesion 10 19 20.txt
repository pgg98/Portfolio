
-- Ejercicio 1

Create or replace procedure InsAcc (pCodigo in number, pMes in Varchar2)   IS
 
Cursor C1 is select identificador from usuarios;
 
BEGIN    
  for r_aux in C1 LOOP   
      begin
           insert into control_acceso ( id_usuario,cod_recurso, mes) 
           values    (r_aux.identificador, pCodigo,  pMes);
      exception        
        when DUP_VAL_ON_INDEX   then
           dbms_output.put_line ('Obviando la inserción para el usuario '|| r_aux.identificador);
        when Others  then
           raise_application_error(-20001,' Error en la inserción');
      end;  
  end LOOP;
END;   

-- Ejercicio 2

create or replace
function  nMismoFormato (pCodigo in number) return number    is

xnRecursos  number:=0;

xnombre_formato RECURSO.NOMBRE_FORMATO%type;

BEGIN 
  
  begin
    select nombre_formato
    into xnombre_formato
    from RECURSO 
    where codigo  = pCodigo;
  exception 
     when no_data_found then 
        xnRecursos := -1;
  end;
  
  if xnRecursos <> -1 then /* El recurso existe */
    select count(*)
    into xnRecursos
    from RECURSO 
     where nombre_formato = xnombre_formato;
  end if;
  
  return xnRecursos;
    
END;

-- Ejercicio 3

Create or replace function Dame_Tamanyo_minmax (ptipo int) return Disponible_para.tamanyo%type
is
vAux Disponible_para.tamanyo%type:=0;

BEGIN
if ptipo = 1 then
    select min(tamanyo) into vAux from Disponible_para;
elsif ptipo = 2 then
   select max(tamanyo) into vAux from Disponible_para;
end if;

Return vAux;
END;

-- Ejercicio 4

create or replace function FincrementaPrecio (pRecurso in number, pPorcen in number) Return RECURSO_pago.precio%TYPE   is
xprecio recurso_pago.precio%TYPE;
vprecioFinal recurso_pago.precio%TYPE;
BEGIN
	BEGIN
		 SELECT PRECIO INTO XPRECIO FROM RECURSO_PAGO
   		 WHERE CODIGO = pRECURSO;
		EXCEPTION 
			WHEN NO_DATA_FOUND THEN 
				RAISE_APPLICATION_ERROR (-20001,'No existe el recurso');
END;
    vprecioFinal  := xprecio + ( xprecio * pPorcen/100);
    RETURN (vprecioFinal);
END;

-- Al usarlo como procedimiento, hemos incluido la modificación del valor del precio en la tabla dentro de su
-- propio código. Resolviendo el ejercicio con el uso de una función, lo mejor sería que únicamente se obtuviese el valor calculado, dejando
-- la sentencia de modificación (UPDATE) para otra acción ajena al propio cálculo. De esa manera,
-- si quisiésemos modificar el precio del recurso de pago 1 con un 10 % más, la sentencia sería:

-- UPDATE RECURSO_PAGO SET precio = FIncrementaprecio(Codigo,10) WHERE Codigo = 1;

-- Esta sentencia podríamos ejecutarla, por ejemplo, en un bucle FOR de un cursor para cada recurso activo.
